
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002b34  00002bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  00002be8  2**0
                  ALLOC
  3 .stab         00002478  00000000  00000000  00002be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010cc  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000626c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008025  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a87b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 11 	call	0x2284	; 0x2284 <main>
      8a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include  "STD_TYPES.h"
#include  "errorState.h"
#include  "DIO_config.h"
#include  "DIO_priv.h"

ES_t DIO_enuInit(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOTOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN0_DIR, PA_PIN1_DIR, PA_PIN2_DIR, PA_PIN3_DIR, PA_PIN4_DIR,
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 83       	st	Z, r24
	PA_PIN5_DIR, PA_PIN6_DIR, PA_PIN7_DIR);
	DDRB = CONC(PB_PIN0_DIR, PB_PIN1_DIR, PB_PIN2_DIR, PB_PIN3_DIR, PB_PIN4_DIR,
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	83 e5       	ldi	r24, 0x53	; 83
     b60:	80 83       	st	Z, r24
	PB_PIN5_DIR, PB_PIN6_DIR, PB_PIN7_DIR);
	DDRC = CONC(PC_PIN0_DIR, PC_PIN1_DIR, PC_PIN2_DIR, PC_PIN3_DIR, PC_PIN4_DIR,
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
	PC_PIN5_DIR, PC_PIN6_DIR, PC_PIN7_DIR);
	DDRD = CONC(PD_PIN0_DIR, PD_PIN1_DIR, PD_PIN2_DIR, PD_PIN3_DIR, PD_PIN4_DIR,
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	83 e5       	ldi	r24, 0x53	; 83
     b70:	80 83       	st	Z, r24
	PD_PIN5_DIR, PD_PIN6_DIR, PD_PIN7_DIR);
	PORTA = CONC(PA_PIN0_VAL, PA_PIN1_VAL, PA_PIN2_VAL, PA_PIN3_VAL,
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	85 e6       	ldi	r24, 0x65	; 101
     b78:	80 83       	st	Z, r24
	PA_PIN4_VAL, PA_PIN5_VAL, PA_PIN6_VAL, PA_PIN7_VAL);
	PORTB = CONC(PB_PIN0_VAL, PB_PIN1_VAL, PB_PIN2_VAL, PB_PIN3_VAL,
     b7a:	e8 e3       	ldi	r30, 0x38	; 56
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	85 e6       	ldi	r24, 0x65	; 101
     b80:	80 83       	st	Z, r24
	PB_PIN4_VAL, PB_PIN5_VAL, PB_PIN6_VAL, PB_PIN7_VAL);
	PORTC = CONC(PC_PIN0_VAL, PC_PIN1_VAL, PC_PIN2_VAL, PC_PIN3_VAL,
     b82:	e5 e3       	ldi	r30, 0x35	; 53
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	10 82       	st	Z, r1
	PC_PIN4_VAL, PC_PIN5_VAL, PC_PIN6_VAL, PC_PIN7_VAL);
	PORTD = CONC(PD_PIN0_VAL, PD_PIN1_VAL, PD_PIN2_VAL, PD_PIN3_VAL,
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	85 e6       	ldi	r24, 0x65	; 101
     b8e:	80 83       	st	Z, r24
	PD_PIN4_VAL, PD_PIN5_VAL, PD_PIN6_VAL, PD_PIN7_VAL);
	 Local_enuErrorState = ES_OK;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value) {
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_enuSetPortDirection+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_enuSetPortDirection+0x8>
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     bb0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	a8 f5       	brcc	.+106    	; 0xc22 <DIO_enuSetPortDirection+0x84>
		switch (Copy_u8PortID) {
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3d 83       	std	Y+5, r19	; 0x05
     bc0:	2c 83       	std	Y+4, r18	; 0x04
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	d1 f0       	breq	.+52     	; 0xc00 <DIO_enuSetPortDirection+0x62>
     bcc:	2c 81       	ldd	r18, Y+4	; 0x04
     bce:	3d 81       	ldd	r19, Y+5	; 0x05
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_enuSetPortDirection+0x42>
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <DIO_enuSetPortDirection+0x58>
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
     be0:	2c 81       	ldd	r18, Y+4	; 0x04
     be2:	3d 81       	ldd	r19, Y+5	; 0x05
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <DIO_enuSetPortDirection+0x6c>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <DIO_enuSetPortDirection+0x76>
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			case DIO_PORTA:
			DDRA = Copy_u8Value;
     bf6:	ea e3       	ldi	r30, 0x3A	; 58
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	80 83       	st	Z, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTB:
			DDRB = Copy_u8Value;
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	80 83       	st	Z, r24
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTC:
			DDRC = Copy_u8Value;
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	80 83       	st	Z, r24
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTD:
			DDRD = Copy_u8Value;
     c14:	e1 e3       	ldi	r30, 0x31	; 49
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_enuSetPortDirection+0x88>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value) {
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_enuSetPortValue+0x6>
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_enuSetPortValue+0x8>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     c4a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	a8 f5       	brcc	.+106    	; 0xcbc <DIO_enuSetPortValue+0x84>
		switch (Copy_u8PortID) {
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3d 83       	std	Y+5, r19	; 0x05
     c5a:	2c 83       	std	Y+4, r18	; 0x04
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	d1 f0       	breq	.+52     	; 0xc9a <DIO_enuSetPortValue+0x62>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_enuSetPortValue+0x42>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	61 f0       	breq	.+24     	; 0xc90 <DIO_enuSetPortValue+0x58>
     c78:	1e c0       	rjmp	.+60     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <DIO_enuSetPortValue+0x6c>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	81 f0       	breq	.+32     	; 0xcae <DIO_enuSetPortValue+0x76>
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			case DIO_PORTA:
			PORTA = Copy_u8Value;
     c90:	eb e3       	ldi	r30, 0x3B	; 59
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
     c98:	0e c0       	rjmp	.+28     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTB:
			PORTB = Copy_u8Value;
     c9a:	e8 e3       	ldi	r30, 0x38	; 56
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTC:
			PORTC = Copy_u8Value;
     ca4:	e5 e3       	ldi	r30, 0x35	; 53
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	80 83       	st	Z, r24
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTD:
			PORTD = Copy_u8Value;
     cae:	e2 e3       	ldi	r30, 0x32	; 50
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enuSetPortValue+0x88>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID) {
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <DIO_enuTogPort+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <DIO_enuTogPort+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	08 f0       	brcs	.+2      	; 0xcea <DIO_enuTogPort+0x18>
     ce8:	41 c0       	rjmp	.+130    	; 0xd6c <DIO_enuTogPort+0x9a>
		switch (Copy_u8PortID) {
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3c 83       	std	Y+4, r19	; 0x04
     cf2:	2b 83       	std	Y+3, r18	; 0x03
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f0       	breq	.+58     	; 0xd38 <DIO_enuTogPort+0x66>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <DIO_enuTogPort+0x40>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	61 f0       	breq	.+24     	; 0xd28 <DIO_enuTogPort+0x56>
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <DIO_enuTogPort+0x94>
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	b1 f0       	breq	.+44     	; 0xd48 <DIO_enuTogPort+0x76>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	c9 f0       	breq	.+50     	; 0xd58 <DIO_enuTogPort+0x86>
     d26:	1f c0       	rjmp	.+62     	; 0xd66 <DIO_enuTogPort+0x94>
			case DIO_PORTA:
			PORTA = ~PORTA;
     d28:	ab e3       	ldi	r26, 0x3B	; 59
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	eb e3       	ldi	r30, 0x3B	; 59
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 95       	com	r24
     d34:	8c 93       	st	X, r24
     d36:	17 c0       	rjmp	.+46     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTB:
			PORTB = ~PORTB;
     d38:	a8 e3       	ldi	r26, 0x38	; 56
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e8 e3       	ldi	r30, 0x38	; 56
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 95       	com	r24
     d44:	8c 93       	st	X, r24
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTC:
			PORTC = ~PORTC;
     d48:	a5 e3       	ldi	r26, 0x35	; 53
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 95       	com	r24
     d54:	8c 93       	st	X, r24
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTD:
			PORTD = ~PORTD;
     d58:	a2 e3       	ldi	r26, 0x32	; 50
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e2 e3       	ldi	r30, 0x32	; 50
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 95       	com	r24
     d64:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_enuTogPort+0x9e>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8* Copy_pu8Value) {
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <DIO_enuGetPortValue+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <DIO_enuGetPortValue+0x8>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <DIO_enuGetPortValue+0xa>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	7c 83       	std	Y+4, r23	; 0x04
     d92:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     d94:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL) {
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	09 f4       	brne	.+2      	; 0xda0 <DIO_enuGetPortValue+0x20>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <DIO_enuGetPortValue+0xa6>
		if (Copy_u8PortID <= DIO_PORTD) {
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	e8 f5       	brcc	.+122    	; 0xe20 <DIO_enuGetPortValue+0xa0>
			switch (Copy_u8PortID) {
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3e 83       	std	Y+6, r19	; 0x06
     dae:	2d 83       	std	Y+5, r18	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	e1 f0       	breq	.+56     	; 0xdf2 <DIO_enuGetPortValue+0x72>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_enuGetPortValue+0x4e>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <DIO_enuGetPortValue+0x64>
     dcc:	26 c0       	rjmp	.+76     	; 0xe1a <DIO_enuGetPortValue+0x9a>
     dce:	2d 81       	ldd	r18, Y+5	; 0x05
     dd0:	3e 81       	ldd	r19, Y+6	; 0x06
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	a1 f0       	breq	.+40     	; 0xe00 <DIO_enuGetPortValue+0x80>
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	b1 f0       	breq	.+44     	; 0xe0e <DIO_enuGetPortValue+0x8e>
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				case DIO_PORTA:
				*Copy_pu8Value = PINA;
     de4:	e9 e3       	ldi	r30, 0x39	; 57
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTB:
				*Copy_pu8Value = PINB;
     df2:	e6 e3       	ldi	r30, 0x36	; 54
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 83       	st	Z, r24
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTC:
				*Copy_pu8Value = PINC;
     e00:	e3 e3       	ldi	r30, 0x33	; 51
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTD:
				*Copy_pu8Value = PIND;
     e0e:	e0 e3       	ldi	r30, 0x30	; 48
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <DIO_enuGetPortValue+0xaa>

			} else {
			Local_enuErrorState = ES_OUT_OF_RANGE;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_enuGetPortValue+0xaa>
		}
		} else {
		Local_enuErrorState = ES_NULL_POINTER;
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2c:	26 96       	adiw	r28, 0x06	; 6
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8* Copy_pu8Value) {
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	27 97       	sbiw	r28, 0x07	; 7
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	8a 83       	std	Y+2, r24	; 0x02
     e54:	6b 83       	std	Y+3, r22	; 0x03
     e56:	5d 83       	std	Y+5, r21	; 0x05
     e58:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL) {
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	09 f4       	brne	.+2      	; 0xe66 <DIO_enuGetPinValue+0x28>
     e64:	7e c0       	rjmp	.+252    	; 0xf62 <DIO_enuGetPinValue+0x124>
		if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7) {
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	84 30       	cpi	r24, 0x04	; 4
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <DIO_enuGetPinValue+0x30>
     e6c:	77 c0       	rjmp	.+238    	; 0xf5c <DIO_enuGetPinValue+0x11e>
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	08 f0       	brcs	.+2      	; 0xe76 <DIO_enuGetPinValue+0x38>
     e74:	73 c0       	rjmp	.+230    	; 0xf5c <DIO_enuGetPinValue+0x11e>
			switch (Copy_u8PortID) {
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3f 83       	std	Y+7, r19	; 0x07
     e7e:	2e 83       	std	Y+6, r18	; 0x06
     e80:	4e 81       	ldd	r20, Y+6	; 0x06
     e82:	5f 81       	ldd	r21, Y+7	; 0x07
     e84:	41 30       	cpi	r20, 0x01	; 1
     e86:	51 05       	cpc	r21, r1
     e88:	59 f1       	breq	.+86     	; 0xee0 <DIO_enuGetPinValue+0xa2>
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	91 05       	cpc	r25, r1
     e92:	34 f4       	brge	.+12     	; 0xea0 <DIO_enuGetPinValue+0x62>
     e94:	2e 81       	ldd	r18, Y+6	; 0x06
     e96:	3f 81       	ldd	r19, Y+7	; 0x07
     e98:	21 15       	cp	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	69 f0       	breq	.+26     	; 0xeb8 <DIO_enuGetPinValue+0x7a>
     e9e:	5b c0       	rjmp	.+182    	; 0xf56 <DIO_enuGetPinValue+0x118>
     ea0:	4e 81       	ldd	r20, Y+6	; 0x06
     ea2:	5f 81       	ldd	r21, Y+7	; 0x07
     ea4:	42 30       	cpi	r20, 0x02	; 2
     ea6:	51 05       	cpc	r21, r1
     ea8:	79 f1       	breq	.+94     	; 0xf08 <DIO_enuGetPinValue+0xca>
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	9f 81       	ldd	r25, Y+7	; 0x07
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <DIO_enuGetPinValue+0x78>
     eb4:	3d c0       	rjmp	.+122    	; 0xf30 <DIO_enuGetPinValue+0xf2>
     eb6:	4f c0       	rjmp	.+158    	; 0xf56 <DIO_enuGetPinValue+0x118>
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
     eb8:	e9 e3       	ldi	r30, 0x39	; 57
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_enuGetPinValue+0x92>
     ecc:	55 95       	asr	r21
     ece:	47 95       	ror	r20
     ed0:	8a 95       	dec	r24
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_enuGetPinValue+0x8e>
     ed4:	ca 01       	movw	r24, r20
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	ec 81       	ldd	r30, Y+4	; 0x04
     eda:	fd 81       	ldd	r31, Y+5	; 0x05
     edc:	80 83       	st	Z, r24
     ede:	3b c0       	rjmp	.+118    	; 0xf56 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
     ee0:	e6 e3       	ldi	r30, 0x36	; 54
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a9 01       	movw	r20, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_enuGetPinValue+0xba>
     ef4:	55 95       	asr	r21
     ef6:	47 95       	ror	r20
     ef8:	8a 95       	dec	r24
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_enuGetPinValue+0xb6>
     efc:	ca 01       	movw	r24, r20
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	ec 81       	ldd	r30, Y+4	; 0x04
     f02:	fd 81       	ldd	r31, Y+5	; 0x05
     f04:	80 83       	st	Z, r24
     f06:	27 c0       	rjmp	.+78     	; 0xf56 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
     f08:	e3 e3       	ldi	r30, 0x33	; 51
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a9 01       	movw	r20, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_enuGetPinValue+0xe2>
     f1c:	55 95       	asr	r21
     f1e:	47 95       	ror	r20
     f20:	8a 95       	dec	r24
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_enuGetPinValue+0xde>
     f24:	ca 01       	movw	r24, r20
     f26:	81 70       	andi	r24, 0x01	; 1
     f28:	ec 81       	ldd	r30, Y+4	; 0x04
     f2a:	fd 81       	ldd	r31, Y+5	; 0x05
     f2c:	80 83       	st	Z, r24
     f2e:	13 c0       	rjmp	.+38     	; 0xf56 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
     f30:	e0 e3       	ldi	r30, 0x30	; 48
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a9 01       	movw	r20, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_enuGetPinValue+0x10a>
     f44:	55 95       	asr	r21
     f46:	47 95       	ror	r20
     f48:	8a 95       	dec	r24
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_enuGetPinValue+0x106>
     f4c:	ca 01       	movw	r24, r20
     f4e:	81 70       	andi	r24, 0x01	; 1
     f50:	ec 81       	ldd	r30, Y+4	; 0x04
     f52:	fd 81       	ldd	r31, Y+5	; 0x05
     f54:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <DIO_enuGetPinValue+0x128>
			} else {
			Local_enuErrorState = ES_OUT_OF_RANGE;
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_enuGetPinValue+0x128>
		}
		} else {
		Local_enuErrorState = ES_NULL_POINTER;
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	27 96       	adiw	r28, 0x07	; 7
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DIO_enuTogPit>:

ES_t DIO_enuTogPit(u8 Copy_u8PortID, u8 Copy_u8PinID) {
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <DIO_enuTogPit+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <DIO_enuTogPit+0x8>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	8a 83       	std	Y+2, r24	; 0x02
     f8a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     f8c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7) {
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	84 30       	cpi	r24, 0x04	; 4
     f92:	08 f0       	brcs	.+2      	; 0xf96 <DIO_enuTogPit+0x1c>
     f94:	77 c0       	rjmp	.+238    	; 0x1084 <DIO_enuTogPit+0x10a>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <DIO_enuTogPit+0x24>
     f9c:	73 c0       	rjmp	.+230    	; 0x1084 <DIO_enuTogPit+0x10a>
		Local_enuErrorState = ES_OK;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01

		Local_enuErrorState = ES_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortID) {
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3d 83       	std	Y+5, r19	; 0x05
     fae:	2c 83       	std	Y+4, r18	; 0x04
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	91 05       	cpc	r25, r1
     fb8:	49 f1       	breq	.+82     	; 0x100c <DIO_enuTogPit+0x92>
     fba:	2c 81       	ldd	r18, Y+4	; 0x04
     fbc:	3d 81       	ldd	r19, Y+5	; 0x05
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	2c f4       	brge	.+10     	; 0xfce <DIO_enuTogPit+0x54>
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	61 f0       	breq	.+24     	; 0xfe4 <DIO_enuTogPit+0x6a>
     fcc:	5d c0       	rjmp	.+186    	; 0x1088 <DIO_enuTogPit+0x10e>
     fce:	2c 81       	ldd	r18, Y+4	; 0x04
     fd0:	3d 81       	ldd	r19, Y+5	; 0x05
     fd2:	22 30       	cpi	r18, 0x02	; 2
     fd4:	31 05       	cpc	r19, r1
     fd6:	71 f1       	breq	.+92     	; 0x1034 <DIO_enuTogPit+0xba>
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	e9 f1       	breq	.+122    	; 0x105c <DIO_enuTogPit+0xe2>
     fe2:	52 c0       	rjmp	.+164    	; 0x1088 <DIO_enuTogPit+0x10e>
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuTogPit+0x88>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuTogPit+0x84>
    1006:	84 27       	eor	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	3e c0       	rjmp	.+124    	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    100c:	a8 e3       	ldi	r26, 0x38	; 56
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_enuTogPit+0xb0>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_enuTogPit+0xac>
    102e:	84 27       	eor	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	2a c0       	rjmp	.+84     	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1034:	a5 e3       	ldi	r26, 0x35	; 53
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e3       	ldi	r30, 0x35	; 53
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_enuTogPit+0xd8>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_enuTogPit+0xd4>
    1056:	84 27       	eor	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_enuTogPit+0x100>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_enuTogPit+0xfc>
    107e:	84 27       	eor	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
		}

		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value) {
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_enuSetPinDirection+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <DIO_enuSetPinDirection+0x8>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_enuSetPinDirection+0xa>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	8a 83       	std	Y+2, r24	; 0x02
    10aa:	6b 83       	std	Y+3, r22	; 0x03
    10ac:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <DIO_enuSetPinDirection+0x1e>
    10b6:	d1 c0       	rjmp	.+418    	; 0x125a <DIO_enuSetPinDirection+0x1c0>
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <DIO_enuSetPinDirection+0x26>
    10be:	cd c0       	rjmp	.+410    	; 0x125a <DIO_enuSetPinDirection+0x1c0>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <DIO_enuSetPinDirection+0x2e>
    10c6:	c9 c0       	rjmp	.+402    	; 0x125a <DIO_enuSetPinDirection+0x1c0>
	&& Copy_u8Value <= OUTPUT) {
		switch (Copy_u8PortID) {
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3e 83       	std	Y+6, r19	; 0x06
    10d0:	2d 83       	std	Y+5, r18	; 0x05
    10d2:	6d 81       	ldd	r22, Y+5	; 0x05
    10d4:	7e 81       	ldd	r23, Y+6	; 0x06
    10d6:	61 30       	cpi	r22, 0x01	; 1
    10d8:	71 05       	cpc	r23, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <DIO_enuSetPinDirection+0x44>
    10dc:	41 c0       	rjmp	.+130    	; 0x1160 <DIO_enuSetPinDirection+0xc6>
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	91 05       	cpc	r25, r1
    10e6:	34 f4       	brge	.+12     	; 0x10f4 <DIO_enuSetPinDirection+0x5a>
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	3e 81       	ldd	r19, Y+6	; 0x06
    10ec:	21 15       	cp	r18, r1
    10ee:	31 05       	cpc	r19, r1
    10f0:	71 f0       	breq	.+28     	; 0x110e <DIO_enuSetPinDirection+0x74>
    10f2:	b0 c0       	rjmp	.+352    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
    10f4:	6d 81       	ldd	r22, Y+5	; 0x05
    10f6:	7e 81       	ldd	r23, Y+6	; 0x06
    10f8:	62 30       	cpi	r22, 0x02	; 2
    10fa:	71 05       	cpc	r23, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <DIO_enuSetPinDirection+0x66>
    10fe:	59 c0       	rjmp	.+178    	; 0x11b2 <DIO_enuSetPinDirection+0x118>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <DIO_enuSetPinDirection+0x72>
    110a:	7c c0       	rjmp	.+248    	; 0x1204 <DIO_enuSetPinDirection+0x16a>
    110c:	a3 c0       	rjmp	.+326    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    110e:	aa e3       	ldi	r26, 0x3A	; 58
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ea e3       	ldi	r30, 0x3A	; 58
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_enuSetPinDirection+0x90>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	2a 95       	dec	r18
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_enuSetPinDirection+0x8c>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value << Copy_u8PinID);
    1134:	aa e3       	ldi	r26, 0x3A	; 58
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ea e3       	ldi	r30, 0x3A	; 58
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	b9 01       	movw	r22, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_enuSetPinDirection+0xba>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_enuSetPinDirection+0xb6>
    1158:	cb 01       	movw	r24, r22
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	7a c0       	rjmp	.+244    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_enuSetPinDirection+0xe2>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	2a 95       	dec	r18
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_enuSetPinDirection+0xde>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	b9 01       	movw	r22, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_enuSetPinDirection+0x10c>
    11a2:	66 0f       	add	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_enuSetPinDirection+0x108>
    11aa:	cb 01       	movw	r24, r22
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	51 c0       	rjmp	.+162    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    11b2:	a4 e3       	ldi	r26, 0x34	; 52
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e4 e3       	ldi	r30, 0x34	; 52
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_enuSetPinDirection+0x134>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	2a 95       	dec	r18
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_enuSetPinDirection+0x130>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    11d8:	a4 e3       	ldi	r26, 0x34	; 52
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e4 e3       	ldi	r30, 0x34	; 52
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b9 01       	movw	r22, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_enuSetPinDirection+0x15e>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_enuSetPinDirection+0x15a>
    11fc:	cb 01       	movw	r24, r22
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	28 c0       	rjmp	.+80     	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1204:	a1 e3       	ldi	r26, 0x31	; 49
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_enuSetPinDirection+0x186>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	2a 95       	dec	r18
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_enuSetPinDirection+0x182>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    122a:	a1 e3       	ldi	r26, 0x31	; 49
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e1 e3       	ldi	r30, 0x31	; 49
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	b9 01       	movw	r22, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_enuSetPinDirection+0x1b0>
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_enuSetPinDirection+0x1ac>
    124e:	cb 01       	movw	r24, r22
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_enuSetPinDirection+0x1c4>

		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1260:	26 96       	adiw	r28, 0x06	; 6
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <DIO_enuSetPintValue>:
ES_t DIO_enuSetPintValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value) {
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_enuSetPintValue+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_enuSetPintValue+0x8>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_enuSetPintValue+0xa>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	8a 83       	std	Y+2, r24	; 0x02
    1282:	6b 83       	std	Y+3, r22	; 0x03
    1284:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    1286:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	08 f0       	brcs	.+2      	; 0x1290 <DIO_enuSetPintValue+0x1e>
    128e:	d1 c0       	rjmp	.+418    	; 0x1432 <DIO_enuSetPintValue+0x1c0>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	08 f0       	brcs	.+2      	; 0x1298 <DIO_enuSetPintValue+0x26>
    1296:	cd c0       	rjmp	.+410    	; 0x1432 <DIO_enuSetPintValue+0x1c0>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <DIO_enuSetPintValue+0x2e>
    129e:	c9 c0       	rjmp	.+402    	; 0x1432 <DIO_enuSetPintValue+0x1c0>
	&& Copy_u8Value <= OUTPUT) {

		switch (Copy_u8PortID) {
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3e 83       	std	Y+6, r19	; 0x06
    12a8:	2d 83       	std	Y+5, r18	; 0x05
    12aa:	6d 81       	ldd	r22, Y+5	; 0x05
    12ac:	7e 81       	ldd	r23, Y+6	; 0x06
    12ae:	61 30       	cpi	r22, 0x01	; 1
    12b0:	71 05       	cpc	r23, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_enuSetPintValue+0x44>
    12b4:	41 c0       	rjmp	.+130    	; 0x1338 <DIO_enuSetPintValue+0xc6>
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	91 05       	cpc	r25, r1
    12be:	34 f4       	brge	.+12     	; 0x12cc <DIO_enuSetPintValue+0x5a>
    12c0:	2d 81       	ldd	r18, Y+5	; 0x05
    12c2:	3e 81       	ldd	r19, Y+6	; 0x06
    12c4:	21 15       	cp	r18, r1
    12c6:	31 05       	cpc	r19, r1
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <DIO_enuSetPintValue+0x74>
    12ca:	b0 c0       	rjmp	.+352    	; 0x142c <DIO_enuSetPintValue+0x1ba>
    12cc:	6d 81       	ldd	r22, Y+5	; 0x05
    12ce:	7e 81       	ldd	r23, Y+6	; 0x06
    12d0:	62 30       	cpi	r22, 0x02	; 2
    12d2:	71 05       	cpc	r23, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_enuSetPintValue+0x66>
    12d6:	59 c0       	rjmp	.+178    	; 0x138a <DIO_enuSetPintValue+0x118>
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <DIO_enuSetPintValue+0x72>
    12e2:	7c c0       	rjmp	.+248    	; 0x13dc <DIO_enuSetPintValue+0x16a>
    12e4:	a3 c0       	rjmp	.+326    	; 0x142c <DIO_enuSetPintValue+0x1ba>
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    12e6:	ab e3       	ldi	r26, 0x3B	; 59
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuSetPintValue+0x90>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	2a 95       	dec	r18
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_enuSetPintValue+0x8c>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value << Copy_u8PinID);
    130c:	ab e3       	ldi	r26, 0x3B	; 59
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	b9 01       	movw	r22, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_enuSetPintValue+0xba>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_enuSetPintValue+0xb6>
    1330:	cb 01       	movw	r24, r22
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	7a c0       	rjmp	.+244    	; 0x142c <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_enuSetPintValue+0xe2>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	2a 95       	dec	r18
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_enuSetPintValue+0xde>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    135e:	a8 e3       	ldi	r26, 0x38	; 56
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e8 e3       	ldi	r30, 0x38	; 56
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_enuSetPintValue+0x10c>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_enuSetPintValue+0x108>
    1382:	cb 01       	movw	r24, r22
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	51 c0       	rjmp	.+162    	; 0x142c <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    138a:	a5 e3       	ldi	r26, 0x35	; 53
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e5 e3       	ldi	r30, 0x35	; 53
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_enuSetPintValue+0x134>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	2a 95       	dec	r18
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_enuSetPintValue+0x130>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    13b0:	a5 e3       	ldi	r26, 0x35	; 53
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	b9 01       	movw	r22, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enuSetPintValue+0x15e>
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enuSetPintValue+0x15a>
    13d4:	cb 01       	movw	r24, r22
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	28 c0       	rjmp	.+80     	; 0x142c <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    13dc:	a2 e3       	ldi	r26, 0x32	; 50
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e2 e3       	ldi	r30, 0x32	; 50
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enuSetPintValue+0x186>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	2a 95       	dec	r18
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enuSetPintValue+0x182>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1402:	a2 e3       	ldi	r26, 0x32	; 50
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b9 01       	movw	r22, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_enuSetPintValue+0x1b0>
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_enuSetPintValue+0x1ac>
    1426:	cb 01       	movw	r24, r22
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuSetPintValue+0x1c4>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	26 96       	adiw	r28, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <KPD_Init>:
#include "DIO_int.h"

#include "KBD_conf.h"
#include "KBD_priv.h"

void KPD_Init(void) {
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPinDirection(KPD_PORT, KPD_ROW_1, DIO_u8INPUT);
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	64 e0       	ldi	r22, 0x04	; 4
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT, KPD_ROW_2, DIO_u8INPUT);
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	65 e0       	ldi	r22, 0x05	; 5
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT, KPD_ROW_3, DIO_u8INPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	66 e0       	ldi	r22, 0x06	; 6
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT, KPD_ROW_4, DIO_u8INPUT);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	67 e0       	ldi	r22, 0x07	; 7
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>

	DIO_enuSetPintValue(KPD_PORT, KPD_ROW_1, DIO_u8PULL_UP);
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	64 e0       	ldi	r22, 0x04	; 4
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	DIO_enuSetPintValue(KPD_PORT, KPD_ROW_2, DIO_u8PULL_UP);
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	65 e0       	ldi	r22, 0x05	; 5
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	DIO_enuSetPintValue(KPD_PORT, KPD_ROW_3, DIO_u8PULL_UP);
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	66 e0       	ldi	r22, 0x06	; 6
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	DIO_enuSetPintValue(KPD_PORT, KPD_ROW_4, DIO_u8PULL_UP);
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	67 e0       	ldi	r22, 0x07	; 7
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>

	DIO_enuSetPinDirection(KPD_PORT, KPD_COL_1, DIO_u8OUTPUT);
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT, KPD_COL_2, DIO_u8OUTPUT);
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT, KPD_COL_3, DIO_u8OUTPUT);
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KPD_PORT, KPD_COL_4, DIO_u8OUTPUT);
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>

	DIO_enuSetPintValue(KPD_PORT, KPD_COL_1, DIO_u8HIGH);
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	DIO_enuSetPintValue(KPD_PORT, KPD_COL_2, DIO_u8HIGH);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	DIO_enuSetPintValue(KPD_PORT, KPD_COL_3, DIO_u8HIGH);
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	DIO_enuSetPintValue(KPD_PORT, KPD_COL_4, DIO_u8HIGH);
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	63 e0       	ldi	r22, 0x03	; 3
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <KBD_u8_grtPressedkey>:

u8 KBD_u8_grtPressedkey(void) {
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
	 u8 Local_u8Pressedkey = KBD_NO_PRESSED_KEY, Local_u8ColumnIndex,
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8RowIndex,Local_u8PinState;
	static u8 Local_Au8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KBDColunmArr[COLUMN_NUM] = { KPD_COL_1, KPD_COL_2,
			KPD_COL_3, KPD_COL_4 };
	u8 Local_u8KBDRowArr[ROW_NUM] = { KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3, KPD_ROW_4 };
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	8e 83       	std	Y+6, r24	; 0x06
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	8f 83       	std	Y+7, r24	; 0x07
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	88 87       	std	Y+8, r24	; 0x08
	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM;
    1520:	1a 82       	std	Y+2, r1	; 0x02
    1522:	62 c0       	rjmp	.+196    	; 0x15e8 <KBD_u8_grtPressedkey+0xf0>
			++Local_u8ColumnIndex) {
		DIO_enuSetPintValue(KPD_PORT, Local_u8KBDColunmArr[Local_u8ColumnIndex],
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	fc 01       	movw	r30, r24
    152c:	e5 59       	subi	r30, 0x95	; 149
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	90 81       	ld	r25, Z
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	69 2f       	mov	r22, r25
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
				DIO_u8LOW);
		for (Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; ++Local_u8RowIndex) {
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	41 c0       	rjmp	.+130    	; 0x15c2 <KBD_u8_grtPressedkey+0xca>
			DIO_enuGetPinValue(KPD_PORT,Local_u8KBDRowArr[Local_u8RowIndex],&Local_u8PinState);
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	ce 01       	movw	r24, r28
    1548:	05 96       	adiw	r24, 0x05	; 5
    154a:	fc 01       	movw	r30, r24
    154c:	e2 0f       	add	r30, r18
    154e:	f3 1f       	adc	r31, r19
    1550:	90 81       	ld	r25, Z
    1552:	9e 01       	movw	r18, r28
    1554:	2c 5f       	subi	r18, 0xFC	; 252
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	69 2f       	mov	r22, r25
    155c:	a9 01       	movw	r20, r18
    155e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuGetPinValue>
			if(Local_u8PinState==DIO_u8LOW)
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	88 23       	and	r24, r24
    1566:	51 f5       	brne	.+84     	; 0x15bc <KBD_u8_grtPressedkey+0xc4>
			{
				Local_u8Pressedkey=Local_Au8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	48 2f       	mov	r20, r24
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	ca 01       	movw	r24, r20
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	82 0f       	add	r24, r18
    1580:	93 1f       	adc	r25, r19
    1582:	fc 01       	movw	r30, r24
    1584:	e1 59       	subi	r30, 0x91	; 145
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	11 c0       	rjmp	.+34     	; 0x15b0 <KBD_u8_grtPressedkey+0xb8>
				while(Local_u8PinState==DIO_u8LOW)
				{
					DIO_enuGetPinValue(KPD_PORT,Local_u8KBDRowArr[Local_u8RowIndex],&Local_u8PinState);
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	ce 01       	movw	r24, r28
    1596:	05 96       	adiw	r24, 0x05	; 5
    1598:	fc 01       	movw	r30, r24
    159a:	e2 0f       	add	r30, r18
    159c:	f3 1f       	adc	r31, r19
    159e:	90 81       	ld	r25, Z
    15a0:	9e 01       	movw	r18, r28
    15a2:	2c 5f       	subi	r18, 0xFC	; 252
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	69 2f       	mov	r22, r25
    15aa:	a9 01       	movw	r20, r18
    15ac:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuGetPinValue>
		for (Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; ++Local_u8RowIndex) {
			DIO_enuGetPinValue(KPD_PORT,Local_u8KBDRowArr[Local_u8RowIndex],&Local_u8PinState);
			if(Local_u8PinState==DIO_u8LOW)
			{
				Local_u8Pressedkey=Local_Au8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				while(Local_u8PinState==DIO_u8LOW)
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	88 23       	and	r24, r24
    15b4:	61 f3       	breq	.-40     	; 0x158e <KBD_u8_grtPressedkey+0x96>
				{
					DIO_enuGetPinValue(KPD_PORT,Local_u8KBDRowArr[Local_u8RowIndex],&Local_u8PinState);
				}
				return Local_u8Pressedkey;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	89 87       	std	Y+9, r24	; 0x09
    15ba:	1c c0       	rjmp	.+56     	; 0x15f4 <KBD_u8_grtPressedkey+0xfc>
	KPD_ROW_3, KPD_ROW_4 };
	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM;
			++Local_u8ColumnIndex) {
		DIO_enuSetPintValue(KPD_PORT, Local_u8KBDColunmArr[Local_u8ColumnIndex],
				DIO_u8LOW);
		for (Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; ++Local_u8RowIndex) {
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <KBD_u8_grtPressedkey+0xd2>
    15c8:	bb cf       	rjmp	.-138    	; 0x1540 <KBD_u8_grtPressedkey+0x48>
					DIO_enuGetPinValue(KPD_PORT,Local_u8KBDRowArr[Local_u8RowIndex],&Local_u8PinState);
				}
				return Local_u8Pressedkey;
			}
		}
		DIO_enuSetPintValue(KPD_PORT, Local_u8KBDColunmArr[Local_u8ColumnIndex],
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	fc 01       	movw	r30, r24
    15d2:	e5 59       	subi	r30, 0x95	; 149
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	90 81       	ld	r25, Z
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	69 2f       	mov	r22, r25
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
	static u8 Local_u8KBDColunmArr[COLUMN_NUM] = { KPD_COL_1, KPD_COL_2,
			KPD_COL_3, KPD_COL_4 };
	u8 Local_u8KBDRowArr[ROW_NUM] = { KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3, KPD_ROW_4 };
	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM;
			++Local_u8ColumnIndex) {
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_Au8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KBDColunmArr[COLUMN_NUM] = { KPD_COL_1, KPD_COL_2,
			KPD_COL_3, KPD_COL_4 };
	u8 Local_u8KBDRowArr[ROW_NUM] = { KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3, KPD_ROW_4 };
	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM;
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <KBD_u8_grtPressedkey+0xf8>
    15ee:	9a cf       	rjmp	.-204    	; 0x1524 <KBD_u8_grtPressedkey+0x2c>
			}
		}
		DIO_enuSetPintValue(KPD_PORT, Local_u8KBDColunmArr[Local_u8ColumnIndex],
				DIO_u8HIGH);
	}
	return Local_u8Pressedkey;
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	89 87       	std	Y+9, r24	; 0x09
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
}
    15f6:	29 96       	adiw	r28, 0x09	; 9
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <LCD_enuInit>:

#include <util/delay.h>

static u8 LCD_u8PosCounter = 0;

ES_t LCD_enuInit(void) {
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	c8 54       	subi	r28, 0x48	; 72
    1616:	d0 40       	sbci	r29, 0x00	; 0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOTOK;
    1622:	fe 01       	movw	r30, r28
    1624:	e9 5b       	subi	r30, 0xB9	; 185
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	10 82       	st	Z, r1

	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1634:	fe 01       	movw	r30, r28
    1636:	e9 5b       	subi	r30, 0xB9	; 185
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    163c:	fe 01       	movw	r30, r28
    163e:	e9 5b       	subi	r30, 0xB9	; 185
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 81       	ld	r24, Z
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	41 f0       	breq	.+16     	; 0x1658 <LCD_enuInit+0x50>
		return Local_enuErrorState;
    1648:	fe 01       	movw	r30, r28
    164a:	e9 5b       	subi	r30, 0xB9	; 185
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	80 81       	ld	r24, Z
    1650:	29 96       	adiw	r28, 0x09	; 9
    1652:	8f af       	std	Y+63, r24	; 0x3f
    1654:	29 97       	sbiw	r28, 0x09	; 9
    1656:	93 c3       	rjmp	.+1830   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1662:	fe 01       	movw	r30, r28
    1664:	e9 5b       	subi	r30, 0xB9	; 185
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    166a:	fe 01       	movw	r30, r28
    166c:	e9 5b       	subi	r30, 0xB9	; 185
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	41 f0       	breq	.+16     	; 0x1686 <LCD_enuInit+0x7e>
		return Local_enuErrorState;
    1676:	fe 01       	movw	r30, r28
    1678:	e9 5b       	subi	r30, 0xB9	; 185
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	29 96       	adiw	r28, 0x09	; 9
    1680:	8f af       	std	Y+63, r24	; 0x3f
    1682:	29 97       	sbiw	r28, 0x09	; 9
    1684:	7c c3       	rjmp	.+1784   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1690:	fe 01       	movw	r30, r28
    1692:	e9 5b       	subi	r30, 0xB9	; 185
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1698:	fe 01       	movw	r30, r28
    169a:	e9 5b       	subi	r30, 0xB9	; 185
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 81       	ld	r24, Z
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	41 f0       	breq	.+16     	; 0x16b4 <LCD_enuInit+0xac>
		return Local_enuErrorState;
    16a4:	fe 01       	movw	r30, r28
    16a6:	e9 5b       	subi	r30, 0xB9	; 185
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	29 96       	adiw	r28, 0x09	; 9
    16ae:	8f af       	std	Y+63, r24	; 0x3f
    16b0:	29 97       	sbiw	r28, 0x09	; 9
    16b2:	65 c3       	rjmp	.+1738   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	67 e0       	ldi	r22, 0x07	; 7
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    16be:	fe 01       	movw	r30, r28
    16c0:	e9 5b       	subi	r30, 0xB9	; 185
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    16c6:	fe 01       	movw	r30, r28
    16c8:	e9 5b       	subi	r30, 0xB9	; 185
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	41 f0       	breq	.+16     	; 0x16e2 <LCD_enuInit+0xda>
		return Local_enuErrorState;
    16d2:	fe 01       	movw	r30, r28
    16d4:	e9 5b       	subi	r30, 0xB9	; 185
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	29 96       	adiw	r28, 0x09	; 9
    16dc:	8f af       	std	Y+63, r24	; 0x3f
    16de:	29 97       	sbiw	r28, 0x09	; 9
    16e0:	4e c3       	rjmp	.+1692   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	66 e0       	ldi	r22, 0x06	; 6
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    16ec:	fe 01       	movw	r30, r28
    16ee:	e9 5b       	subi	r30, 0xB9	; 185
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    16f4:	fe 01       	movw	r30, r28
    16f6:	e9 5b       	subi	r30, 0xB9	; 185
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	41 f0       	breq	.+16     	; 0x1710 <LCD_enuInit+0x108>
		return Local_enuErrorState;
    1700:	fe 01       	movw	r30, r28
    1702:	e9 5b       	subi	r30, 0xB9	; 185
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 81       	ld	r24, Z
    1708:	29 96       	adiw	r28, 0x09	; 9
    170a:	8f af       	std	Y+63, r24	; 0x3f
    170c:	29 97       	sbiw	r28, 0x09	; 9
    170e:	37 c3       	rjmp	.+1646   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	65 e0       	ldi	r22, 0x05	; 5
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    171a:	fe 01       	movw	r30, r28
    171c:	e9 5b       	subi	r30, 0xB9	; 185
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1722:	fe 01       	movw	r30, r28
    1724:	e9 5b       	subi	r30, 0xB9	; 185
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 81       	ld	r24, Z
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	41 f0       	breq	.+16     	; 0x173e <LCD_enuInit+0x136>
		return Local_enuErrorState;
    172e:	fe 01       	movw	r30, r28
    1730:	e9 5b       	subi	r30, 0xB9	; 185
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	29 96       	adiw	r28, 0x09	; 9
    1738:	8f af       	std	Y+63, r24	; 0x3f
    173a:	29 97       	sbiw	r28, 0x09	; 9
    173c:	20 c3       	rjmp	.+1600   	; 0x1d7e <LCD_enuInit+0x776>
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	64 e0       	ldi	r22, 0x04	; 4
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1748:	fe 01       	movw	r30, r28
    174a:	e9 5b       	subi	r30, 0xB9	; 185
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1750:	fe 01       	movw	r30, r28
    1752:	e9 5b       	subi	r30, 0xB9	; 185
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	41 f0       	breq	.+16     	; 0x176c <LCD_enuInit+0x164>
		return Local_enuErrorState;
    175c:	fe 01       	movw	r30, r28
    175e:	e9 5b       	subi	r30, 0xB9	; 185
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	29 96       	adiw	r28, 0x09	; 9
    1766:	8f af       	std	Y+63, r24	; 0x3f
    1768:	29 97       	sbiw	r28, 0x09	; 9
    176a:	09 c3       	rjmp	.+1554   	; 0x1d7e <LCD_enuInit+0x776>
    176c:	fe 01       	movw	r30, r28
    176e:	ed 5b       	subi	r30, 0xBD	; 189
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	ac e0       	ldi	r26, 0x0C	; 12
    1778:	b2 e4       	ldi	r27, 0x42	; 66
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	8e 01       	movw	r16, r28
    1784:	01 5c       	subi	r16, 0xC1	; 193
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	ed 5b       	subi	r30, 0xBD	; 189
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a e7       	ldi	r20, 0x7A	; 122
    179c:	53 e4       	ldi	r21, 0x43	; 67
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	f8 01       	movw	r30, r16
    17a8:	80 83       	st	Z, r24
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	a2 83       	std	Z+2, r26	; 0x02
    17ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b0:	fe 01       	movw	r30, r28
    17b2:	ff 96       	adiw	r30, 0x3f	; 63
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <LCD_enuInit+0x1ce>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9e af       	std	Y+62, r25	; 0x3e
    17d2:	8d af       	std	Y+61, r24	; 0x3d
    17d4:	46 c0       	rjmp	.+140    	; 0x1862 <LCD_enuInit+0x25a>
	else if (__tmp > 65535)
    17d6:	fe 01       	movw	r30, r28
    17d8:	ff 96       	adiw	r30, 0x3f	; 63
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	64 f5       	brge	.+88     	; 0x184a <LCD_enuInit+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	fe 01       	movw	r30, r28
    17f4:	ed 5b       	subi	r30, 0xBD	; 189
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9e af       	std	Y+62, r25	; 0x3e
    181e:	8d af       	std	Y+61, r24	; 0x3d
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_enuInit+0x238>
    1822:	89 e1       	ldi	r24, 0x19	; 25
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9c af       	std	Y+60, r25	; 0x3c
    1828:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182a:	8b ad       	ldd	r24, Y+59	; 0x3b
    182c:	9c ad       	ldd	r25, Y+60	; 0x3c
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_enuInit+0x226>
    1832:	9c af       	std	Y+60, r25	; 0x3c
    1834:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	8d ad       	ldd	r24, Y+61	; 0x3d
    1838:	9e ad       	ldd	r25, Y+62	; 0x3e
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9e af       	std	Y+62, r25	; 0x3e
    183e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	8d ad       	ldd	r24, Y+61	; 0x3d
    1842:	9e ad       	ldd	r25, Y+62	; 0x3e
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_enuInit+0x21a>
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <LCD_enuInit+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	fe 01       	movw	r30, r28
    184c:	ff 96       	adiw	r30, 0x3f	; 63
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9e af       	std	Y+62, r25	; 0x3e
    1860:	8d af       	std	Y+61, r24	; 0x3d
    1862:	8d ad       	ldd	r24, Y+61	; 0x3d
    1864:	9e ad       	ldd	r25, Y+62	; 0x3e
    1866:	9a af       	std	Y+58, r25	; 0x3a
    1868:	89 af       	std	Y+57, r24	; 0x39
    186a:	89 ad       	ldd	r24, Y+57	; 0x39
    186c:	9a ad       	ldd	r25, Y+58	; 0x3a
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_enuInit+0x266>
    1872:	9a af       	std	Y+58, r25	; 0x3a
    1874:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	63 e0       	ldi	r22, 0x03	; 3
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1880:	fe 01       	movw	r30, r28
    1882:	e9 5b       	subi	r30, 0xB9	; 185
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1888:	fe 01       	movw	r30, r28
    188a:	e9 5b       	subi	r30, 0xB9	; 185
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	41 f0       	breq	.+16     	; 0x18a4 <LCD_enuInit+0x29c>
		return Local_enuErrorState;
    1894:	fe 01       	movw	r30, r28
    1896:	e9 5b       	subi	r30, 0xB9	; 185
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	29 96       	adiw	r28, 0x09	; 9
    189e:	8f af       	std	Y+63, r24	; 0x3f
    18a0:	29 97       	sbiw	r28, 0x09	; 9
    18a2:	6d c2       	rjmp	.+1242   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e9 5b       	subi	r30, 0xB9	; 185
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    18b6:	fe 01       	movw	r30, r28
    18b8:	e9 5b       	subi	r30, 0xB9	; 185
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	41 f0       	breq	.+16     	; 0x18d2 <LCD_enuInit+0x2ca>
		return Local_enuErrorState;
    18c2:	fe 01       	movw	r30, r28
    18c4:	e9 5b       	subi	r30, 0xB9	; 185
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	29 96       	adiw	r28, 0x09	; 9
    18cc:	8f af       	std	Y+63, r24	; 0x3f
    18ce:	29 97       	sbiw	r28, 0x09	; 9
    18d0:	56 c2       	rjmp	.+1196   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    18dc:	fe 01       	movw	r30, r28
    18de:	e9 5b       	subi	r30, 0xB9	; 185
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    18e4:	fe 01       	movw	r30, r28
    18e6:	e9 5b       	subi	r30, 0xB9	; 185
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	41 f0       	breq	.+16     	; 0x1900 <LCD_enuInit+0x2f8>
		return Local_enuErrorState;
    18f0:	fe 01       	movw	r30, r28
    18f2:	e9 5b       	subi	r30, 0xB9	; 185
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	29 96       	adiw	r28, 0x09	; 9
    18fa:	8f af       	std	Y+63, r24	; 0x3f
    18fc:	29 97       	sbiw	r28, 0x09	; 9
    18fe:	3f c2       	rjmp	.+1150   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    190a:	fe 01       	movw	r30, r28
    190c:	e9 5b       	subi	r30, 0xB9	; 185
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1912:	fe 01       	movw	r30, r28
    1914:	e9 5b       	subi	r30, 0xB9	; 185
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	41 f0       	breq	.+16     	; 0x192e <LCD_enuInit+0x326>
		return Local_enuErrorState;
    191e:	fe 01       	movw	r30, r28
    1920:	e9 5b       	subi	r30, 0xB9	; 185
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	29 96       	adiw	r28, 0x09	; 9
    1928:	8f af       	std	Y+63, r24	; 0x3f
    192a:	29 97       	sbiw	r28, 0x09	; 9
    192c:	28 c2       	rjmp	.+1104   	; 0x1d7e <LCD_enuInit+0x776>

	Local_enuErrorState = LCD_inlenuSendCommand(0x38);
    192e:	88 e3       	ldi	r24, 0x38	; 56
    1930:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
    1934:	fe 01       	movw	r30, r28
    1936:	e9 5b       	subi	r30, 0xB9	; 185
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    193c:	fe 01       	movw	r30, r28
    193e:	e9 5b       	subi	r30, 0xB9	; 185
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	80 81       	ld	r24, Z
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	41 f0       	breq	.+16     	; 0x1958 <LCD_enuInit+0x350>
		return Local_enuErrorState;
    1948:	fe 01       	movw	r30, r28
    194a:	e9 5b       	subi	r30, 0xB9	; 185
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	29 96       	adiw	r28, 0x09	; 9
    1952:	8f af       	std	Y+63, r24	; 0x3f
    1954:	29 97       	sbiw	r28, 0x09	; 9
    1956:	13 c2       	rjmp	.+1062   	; 0x1d7e <LCD_enuInit+0x776>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e8       	ldi	r26, 0x80	; 128
    195e:	bf e3       	ldi	r27, 0x3F	; 63
    1960:	8d ab       	std	Y+53, r24	; 0x35
    1962:	9e ab       	std	Y+54, r25	; 0x36
    1964:	af ab       	std	Y+55, r26	; 0x37
    1966:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6d a9       	ldd	r22, Y+53	; 0x35
    196a:	7e a9       	ldd	r23, Y+54	; 0x36
    196c:	8f a9       	ldd	r24, Y+55	; 0x37
    196e:	98 ad       	ldd	r25, Y+56	; 0x38
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	89 ab       	std	Y+49, r24	; 0x31
    1982:	9a ab       	std	Y+50, r25	; 0x32
    1984:	ab ab       	std	Y+51, r26	; 0x33
    1986:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1988:	69 a9       	ldd	r22, Y+49	; 0x31
    198a:	7a a9       	ldd	r23, Y+50	; 0x32
    198c:	8b a9       	ldd	r24, Y+51	; 0x33
    198e:	9c a9       	ldd	r25, Y+52	; 0x34
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <LCD_enuInit+0x3a2>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	98 ab       	std	Y+48, r25	; 0x30
    19a6:	8f a7       	std	Y+47, r24	; 0x2f
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <LCD_enuInit+0x420>
	else if (__tmp > 65535)
    19aa:	69 a9       	ldd	r22, Y+49	; 0x31
    19ac:	7a a9       	ldd	r23, Y+50	; 0x32
    19ae:	8b a9       	ldd	r24, Y+51	; 0x33
    19b0:	9c a9       	ldd	r25, Y+52	; 0x34
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <LCD_enuInit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6d a9       	ldd	r22, Y+53	; 0x35
    19c4:	7e a9       	ldd	r23, Y+54	; 0x36
    19c6:	8f a9       	ldd	r24, Y+55	; 0x37
    19c8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	98 ab       	std	Y+48, r25	; 0x30
    19e8:	8f a7       	std	Y+47, r24	; 0x2f
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_enuInit+0x402>
    19ec:	89 e1       	ldi	r24, 0x19	; 25
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9e a7       	std	Y+46, r25	; 0x2e
    19f2:	8d a7       	std	Y+45, r24	; 0x2d
    19f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_enuInit+0x3f0>
    19fc:	9e a7       	std	Y+46, r25	; 0x2e
    19fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a02:	98 a9       	ldd	r25, Y+48	; 0x30
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	98 ab       	std	Y+48, r25	; 0x30
    1a08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_enuInit+0x3e4>
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <LCD_enuInit+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	69 a9       	ldd	r22, Y+49	; 0x31
    1a16:	7a a9       	ldd	r23, Y+50	; 0x32
    1a18:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	98 ab       	std	Y+48, r25	; 0x30
    1a26:	8f a7       	std	Y+47, r24	; 0x2f
    1a28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2c:	9c a7       	std	Y+44, r25	; 0x2c
    1a2e:	8b a7       	std	Y+43, r24	; 0x2b
    1a30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a32:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_enuInit+0x42c>
    1a38:	9c a7       	std	Y+44, r25	; 0x2c
    1a3a:	8b a7       	std	Y+43, r24	; 0x2b
#else
#error "wrong configuration of LCD mode!!"
#endif


	Local_enuErrorState = LCD_inlenuSendCommand(0x0F);
    1a3c:	8f e0       	ldi	r24, 0x0F	; 15
    1a3e:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
    1a42:	fe 01       	movw	r30, r28
    1a44:	e9 5b       	subi	r30, 0xB9	; 185
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e9 5b       	subi	r30, 0xB9	; 185
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	41 f0       	breq	.+16     	; 0x1a66 <LCD_enuInit+0x45e>
		return Local_enuErrorState;
    1a56:	fe 01       	movw	r30, r28
    1a58:	e9 5b       	subi	r30, 0xB9	; 185
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	29 96       	adiw	r28, 0x09	; 9
    1a60:	8f af       	std	Y+63, r24	; 0x3f
    1a62:	29 97       	sbiw	r28, 0x09	; 9
    1a64:	8c c1       	rjmp	.+792    	; 0x1d7e <LCD_enuInit+0x776>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e8       	ldi	r26, 0x80	; 128
    1a6c:	bf e3       	ldi	r27, 0x3F	; 63
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	98 a7       	std	Y+40, r25	; 0x28
    1a72:	a9 a7       	std	Y+41, r26	; 0x29
    1a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6f a1       	ldd	r22, Y+39	; 0x27
    1a78:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a e7       	ldi	r20, 0x7A	; 122
    1a84:	53 e4       	ldi	r21, 0x43	; 67
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b a3       	std	Y+35, r24	; 0x23
    1a90:	9c a3       	std	Y+36, r25	; 0x24
    1a92:	ad a3       	std	Y+37, r26	; 0x25
    1a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a96:	6b a1       	ldd	r22, Y+35	; 0x23
    1a98:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_enuInit+0x4b0>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_enuInit+0x52e>
	else if (__tmp > 65535)
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_enuInit+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_enuInit+0x510>
    1afa:	89 e1       	ldi	r24, 0x19	; 25
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_enuInit+0x4fe>
    1b0a:	98 a3       	std	Y+32, r25	; 0x20
    1b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_enuInit+0x4f2>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <LCD_enuInit+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_enuInit+0x53a>
    1b46:	9e 8f       	std	Y+30, r25	; 0x1e
    1b48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Local_enuErrorState = LCD_inlenuSendCommand(0x01);
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
    1b50:	fe 01       	movw	r30, r28
    1b52:	e9 5b       	subi	r30, 0xB9	; 185
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 5b       	subi	r30, 0xB9	; 185
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	41 f0       	breq	.+16     	; 0x1b74 <LCD_enuInit+0x56c>
		return Local_enuErrorState;
    1b64:	fe 01       	movw	r30, r28
    1b66:	e9 5b       	subi	r30, 0xB9	; 185
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	29 96       	adiw	r28, 0x09	; 9
    1b6e:	8f af       	std	Y+63, r24	; 0x3f
    1b70:	29 97       	sbiw	r28, 0x09	; 9
    1b72:	05 c1       	rjmp	.+522    	; 0x1d7e <LCD_enuInit+0x776>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e4       	ldi	r27, 0x40	; 64
    1b7c:	89 8f       	std	Y+25, r24	; 0x19
    1b7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b80:	ab 8f       	std	Y+27, r26	; 0x1b
    1b82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b84:	69 8d       	ldd	r22, Y+25	; 0x19
    1b86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a e7       	ldi	r20, 0x7A	; 122
    1b92:	53 e4       	ldi	r21, 0x43	; 67
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8d 8b       	std	Y+21, r24	; 0x15
    1b9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ba0:	af 8b       	std	Y+23, r26	; 0x17
    1ba2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    1baa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <LCD_enuInit+0x5be>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 8b       	std	Y+20, r25	; 0x14
    1bc2:	8b 8b       	std	Y+19, r24	; 0x13
    1bc4:	3f c0       	rjmp	.+126    	; 0x1c44 <LCD_enuInit+0x63c>
	else if (__tmp > 65535)
    1bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	4c f5       	brge	.+82     	; 0x1c30 <LCD_enuInit+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bde:	69 8d       	ldd	r22, Y+25	; 0x19
    1be0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e2       	ldi	r20, 0x20	; 32
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9c 8b       	std	Y+20, r25	; 0x14
    1c04:	8b 8b       	std	Y+19, r24	; 0x13
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_enuInit+0x61e>
    1c08:	89 e1       	ldi	r24, 0x19	; 25
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9a 8b       	std	Y+18, r25	; 0x12
    1c0e:	89 8b       	std	Y+17, r24	; 0x11
    1c10:	89 89       	ldd	r24, Y+17	; 0x11
    1c12:	9a 89       	ldd	r25, Y+18	; 0x12
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_enuInit+0x60c>
    1c18:	9a 8b       	std	Y+18, r25	; 0x12
    1c1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	69 f7       	brne	.-38     	; 0x1c08 <LCD_enuInit+0x600>
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <LCD_enuInit+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c30:	6d 89       	ldd	r22, Y+21	; 0x15
    1c32:	7e 89       	ldd	r23, Y+22	; 0x16
    1c34:	8f 89       	ldd	r24, Y+23	; 0x17
    1c36:	98 8d       	ldd	r25, Y+24	; 0x18
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9c 8b       	std	Y+20, r25	; 0x14
    1c42:	8b 8b       	std	Y+19, r24	; 0x13
    1c44:	8b 89       	ldd	r24, Y+19	; 0x13
    1c46:	9c 89       	ldd	r25, Y+20	; 0x14
    1c48:	98 8b       	std	Y+16, r25	; 0x10
    1c4a:	8f 87       	std	Y+15, r24	; 0x0f
    1c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4e:	98 89       	ldd	r25, Y+16	; 0x10
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_enuInit+0x648>
    1c54:	98 8b       	std	Y+16, r25	; 0x10
    1c56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	Local_enuErrorState = LCD_inlenuSendCommand(0x06);
    1c58:	86 e0       	ldi	r24, 0x06	; 6
    1c5a:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e9 5b       	subi	r30, 0xB9	; 185
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1c66:	fe 01       	movw	r30, r28
    1c68:	e9 5b       	subi	r30, 0xB9	; 185
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	41 f0       	breq	.+16     	; 0x1c82 <LCD_enuInit+0x67a>
		return Local_enuErrorState;
    1c72:	fe 01       	movw	r30, r28
    1c74:	e9 5b       	subi	r30, 0xB9	; 185
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 81       	ld	r24, Z
    1c7a:	29 96       	adiw	r28, 0x09	; 9
    1c7c:	8f af       	std	Y+63, r24	; 0x3f
    1c7e:	29 97       	sbiw	r28, 0x09	; 9
    1c80:	7e c0       	rjmp	.+252    	; 0x1d7e <LCD_enuInit+0x776>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	9c 87       	std	Y+12, r25	; 0x0c
    1c8e:	ad 87       	std	Y+13, r26	; 0x0d
    1c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ca0:	53 e4       	ldi	r21, 0x43	; 67
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8f 83       	std	Y+7, r24	; 0x07
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	a9 87       	std	Y+9, r26	; 0x09
    1cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_enuInit+0x6cc>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_enuInit+0x74a>
	else if (__tmp > 65535)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_enuInit+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_enuInit+0x72c>
    1d16:	89 e1       	ldi	r24, 0x19	; 25
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_enuInit+0x71a>
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_enuInit+0x70e>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_enuInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_enuInit+0x756>
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Local_enuErrorState = ES_OK;
    1d66:	fe 01       	movw	r30, r28
    1d68:	e9 5b       	subi	r30, 0xB9	; 185
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 83       	st	Z, r24
	return Local_enuErrorState;
    1d70:	fe 01       	movw	r30, r28
    1d72:	e9 5b       	subi	r30, 0xB9	; 185
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	29 96       	adiw	r28, 0x09	; 9
    1d7a:	8f af       	std	Y+63, r24	; 0x3f
    1d7c:	29 97       	sbiw	r28, 0x09	; 9
    1d7e:	29 96       	adiw	r28, 0x09	; 9
    1d80:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d82:	29 97       	sbiw	r28, 0x09	; 9
}
    1d84:	c8 5b       	subi	r28, 0xB8	; 184
    1d86:	df 4f       	sbci	r29, 0xFF	; 255
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data) {
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <LCD_enuDisplayChar+0x6>
    1da2:	0f 92       	push	r0
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1daa:	19 82       	std	Y+1, r1	; 0x01

	LCD_vidCheckPosition();
    1dac:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_vidCheckPosition>

	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1dba:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	19 f0       	breq	.+6      	; 0x1dc8 <LCD_enuDisplayChar+0x2c>
		return Local_enuErrorState;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	0e c0       	rjmp	.+28     	; 0x1de4 <LCD_enuDisplayChar+0x48>

	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_enuLatch>
    1dce:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	19 f0       	breq	.+6      	; 0x1ddc <LCD_enuDisplayChar+0x40>
		return Local_enuErrorState;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <LCD_enuDisplayChar+0x48>

	Local_enuErrorState = ES_OK;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	8b 83       	std	Y+3, r24	; 0x03
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command) {
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <LCD_enuSendCommand+0x6>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1e00:	19 82       	std	Y+1, r1	; 0x01


	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <LCD_enuSendCommand+0x28>
		return Local_enuErrorState;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	0e c0       	rjmp	.+28     	; 0x1e36 <LCD_enuSendCommand+0x44>


	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_enuLatch>
    1e20:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <LCD_enuSendCommand+0x3c>
		return Local_enuErrorState;
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <LCD_enuSendCommand+0x44>

	Local_enuErrorState = ES_OK;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	8b 83       	std	Y+3, r24	; 0x03
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <LCD_enuLatch>:

static ES_t LCD_enuLatch(u8 Copy_u8Data) {
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <LCD_enuLatch+0x6>
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1e52:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = DIO_enuSetPintValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1e5e:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	19 f0       	breq	.+6      	; 0x1e6c <LCD_enuLatch+0x28>
		return Local_enuErrorState;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	9b c0       	rjmp	.+310    	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1e76:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <LCD_enuLatch+0x40>
		return Local_enuErrorState;
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8f c0       	rjmp	.+286    	; 0x1fa2 <LCD_enuLatch+0x15e>

#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPintValue(D7_PORT, D7_PIN,
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	98 2f       	mov	r25, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	99 27       	eor	r25, r25
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	67 e0       	ldi	r22, 0x07	; 7
    1e92:	49 2f       	mov	r20, r25
    1e94:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1e98:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 7) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	19 f0       	breq	.+6      	; 0x1ea6 <LCD_enuLatch+0x62>
		return Local_enuErrorState;
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
    1ea4:	7e c0       	rjmp	.+252    	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D6_PORT, D6_PIN,
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	82 95       	swap	r24
    1eaa:	86 95       	lsr	r24
    1eac:	86 95       	lsr	r24
    1eae:	83 70       	andi	r24, 0x03	; 3
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	91 70       	andi	r25, 0x01	; 1
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	66 e0       	ldi	r22, 0x06	; 6
    1eb8:	49 2f       	mov	r20, r25
    1eba:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1ebe:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 6) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	19 f0       	breq	.+6      	; 0x1ecc <LCD_enuLatch+0x88>
		return Local_enuErrorState;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    1eca:	6b c0       	rjmp	.+214    	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D5_PORT, D5_PIN,
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	82 95       	swap	r24
    1ed0:	86 95       	lsr	r24
    1ed2:	87 70       	andi	r24, 0x07	; 7
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	91 70       	andi	r25, 0x01	; 1
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	65 e0       	ldi	r22, 0x05	; 5
    1edc:	49 2f       	mov	r20, r25
    1ede:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1ee2:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 5) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <LCD_enuLatch+0xac>
		return Local_enuErrorState;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	59 c0       	rjmp	.+178    	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D4_PORT, D4_PIN,
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	82 95       	swap	r24
    1ef4:	8f 70       	andi	r24, 0x0F	; 15
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	91 70       	andi	r25, 0x01	; 1
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	64 e0       	ldi	r22, 0x04	; 4
    1efe:	49 2f       	mov	r20, r25
    1f00:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1f04:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 4) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <LCD_enuLatch+0xce>
		return Local_enuErrorState;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    1f10:	48 c0       	rjmp	.+144    	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D3_PORT, D3_PIN,
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	86 95       	lsr	r24
    1f16:	86 95       	lsr	r24
    1f18:	86 95       	lsr	r24
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	91 70       	andi	r25, 0x01	; 1
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	63 e0       	ldi	r22, 0x03	; 3
    1f22:	49 2f       	mov	r20, r25
    1f24:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1f28:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 3) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	36 c0       	rjmp	.+108    	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D2_PORT, D2_PIN,
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	86 95       	lsr	r24
    1f3a:	86 95       	lsr	r24
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	91 70       	andi	r25, 0x01	; 1
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	49 2f       	mov	r20, r25
    1f46:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1f4a:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 2) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	19 f0       	breq	.+6      	; 0x1f58 <LCD_enuLatch+0x114>
		return Local_enuErrorState;
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	8b 83       	std	Y+3, r24	; 0x03
    1f56:	25 c0       	rjmp	.+74     	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D1_PORT, D1_PIN,
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	86 95       	lsr	r24
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	91 70       	andi	r25, 0x01	; 1
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	49 2f       	mov	r20, r25
    1f66:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1f6a:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 1) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	19 f0       	breq	.+6      	; 0x1f78 <LCD_enuLatch+0x134>
		return Local_enuErrorState;
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	15 c0       	rjmp	.+42     	; 0x1fa2 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D0_PORT, D0_PIN,
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	98 2f       	mov	r25, r24
    1f7c:	91 70       	andi	r25, 0x01	; 1
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	49 2f       	mov	r20, r25
    1f84:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1f88:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 0) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	19 f0       	breq	.+6      	; 0x1f96 <LCD_enuLatch+0x152>
		return Local_enuErrorState;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <LCD_enuLatch+0x15e>

#else
#error "wrong configuration of LCD mode!!"
#endif

	LCD_vidTrigger_LATCH();
    1f96:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_vidTrigger_LATCH>

	Local_enuErrorState = ES_OK;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <LCD_vidTrigger_LATCH>:

static void LCD_vidTrigger_LATCH(void) {
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	2e 97       	sbiw	r28, 0x0e	; 14
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61

	DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e2       	ldi	r26, 0x20	; 32
    1fd4:	b1 e4       	ldi	r27, 0x41	; 65
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
    1fd8:	9c 87       	std	Y+12, r25	; 0x0c
    1fda:	ad 87       	std	Y+13, r26	; 0x0d
    1fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	53 e4       	ldi	r21, 0x43	; 67
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	a9 87       	std	Y+9, r26	; 0x09
    1ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_vidTrigger_LATCH+0x70>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_vidTrigger_LATCH+0xee>
	else if (__tmp > 65535)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_vidTrigger_LATCH+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6b 85       	ldd	r22, Y+11	; 0x0b
    203a:	7c 85       	ldd	r23, Y+12	; 0x0c
    203c:	8d 85       	ldd	r24, Y+13	; 0x0d
    203e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_vidTrigger_LATCH+0xd0>
    2062:	89 e1       	ldi	r24, 0x19	; 25
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_vidTrigger_LATCH+0xbe>
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_vidTrigger_LATCH+0xb2>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_vidTrigger_LATCH+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_vidTrigger_LATCH+0xfa>
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8LOW);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	62 e0       	ldi	r22, 0x02	; 2
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
}
    20bc:	2e 96       	adiw	r28, 0x0e	; 14
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <LCD_inlenuSendCommand>:

static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command) {
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <LCD_inlenuSendCommand+0x6>
    20d4:	0f 92       	push	r0
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    20dc:	19 82       	std	Y+1, r1	; 0x01


	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8LOW);
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    20e8:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <LCD_inlenuSendCommand+0x28>
		return Local_enuErrorState;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	0e c0       	rjmp	.+28     	; 0x2112 <LCD_inlenuSendCommand+0x44>


	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_enuLatch>
    20fc:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	19 f0       	breq	.+6      	; 0x210a <LCD_inlenuSendCommand+0x3c>
		return Local_enuErrorState;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <LCD_inlenuSendCommand+0x44>

	Local_enuErrorState = ES_OK;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position) {
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <LCD_enuGoToPosition+0x6>
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
    2130:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Position < 16) {
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	80 31       	cpi	r24, 0x10	; 16
    2136:	e0 f4       	brcc	.+56     	; 0x2170 <LCD_enuGoToPosition+0x50>
		if (Copy_u8Line == FIRST_LINE) {
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	59 f4       	brne	.+22     	; 0x2154 <LCD_enuGoToPosition+0x34>
			Local_enuErrorState = ES_OK;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState = LCD_inlenuSendCommand(
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	80 58       	subi	r24, 0x80	; 128
    2146:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
    214a:	89 83       	std	Y+1, r24	; 0x01
					START_OF_FIRST_LINE + Copy_u8Position);

			LCD_u8PosCounter = Copy_u8Position;
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	80 93 80 00 	sts	0x0080, r24
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <LCD_enuGoToPosition+0x50>
		} else if (Copy_u8Line == SECOND_LINE) {
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	59 f4       	brne	.+22     	; 0x2170 <LCD_enuGoToPosition+0x50>
			Local_enuErrorState = ES_OK;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState = LCD_inlenuSendCommand(
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	80 54       	subi	r24, 0x40	; 64
    2162:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
    2166:	89 83       	std	Y+1, r24	; 0x01
					START_OF_SECOND_LINE + Copy_u8Position);
			LCD_u8PosCounter = Copy_u8Position + 16;
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	80 5f       	subi	r24, 0xF0	; 240
    216c:	80 93 80 00 	sts	0x0080, r24
		}
	}

	return Local_enuErrorState;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <LCD_vidCheckPosition>:

static void LCD_vidCheckPosition(void) {
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
	if (LCD_u8PosCounter == 16) {
    2186:	80 91 80 00 	lds	r24, 0x0080
    218a:	80 31       	cpi	r24, 0x10	; 16
    218c:	51 f4       	brne	.+20     	; 0x21a2 <LCD_vidCheckPosition+0x24>
		LCD_enuGoToPosition(SECOND_LINE, 0);
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_enuGoToPosition>
		LCD_u8PosCounter++;
    2196:	80 91 80 00 	lds	r24, 0x0080
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	80 93 80 00 	sts	0x0080, r24
    21a0:	13 c0       	rjmp	.+38     	; 0x21c8 <LCD_vidCheckPosition+0x4a>
	} else if (LCD_u8PosCounter == 32) {
    21a2:	80 91 80 00 	lds	r24, 0x0080
    21a6:	80 32       	cpi	r24, 0x20	; 32
    21a8:	51 f4       	brne	.+20     	; 0x21be <LCD_vidCheckPosition+0x40>
		LCD_inlenuSendCommand(0x01);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
		LCD_enuGoToPosition(FIRST_LINE, 0);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_enuGoToPosition>
		LCD_u8PosCounter = 0;
    21b8:	10 92 80 00 	sts	0x0080, r1
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <LCD_vidCheckPosition+0x4a>
	} else {
		LCD_u8PosCounter++;
    21be:	80 91 80 00 	lds	r24, 0x0080
    21c2:	8f 5f       	subi	r24, 0xFF	; 255
    21c4:	80 93 80 00 	sts	0x0080, r24
	}
}
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <LCD_vidClearScreen>:

void LCD_vidClearScreen(void) {
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	LCD_inlenuSendCommand(0x01);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_inlenuSendCommand>
	LCD_u8PosCounter = 0;
    21dc:	10 92 80 00 	sts	0x0080, r1
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <LCD_enuWriteNumber>:


ES_t LCD_enuWriteNumber(int Copy_s32Number) {
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	64 97       	sbiw	r28, 0x14	; 20
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
	ES_t Local_enuErrorState = ES_NOTOK;
    21fe:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);
    2200:	00 d0       	rcall	.+0      	; 0x2202 <LCD_enuWriteNumber+0x1c>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LCD_enuWriteNumber+0x1e>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <LCD_enuWriteNumber+0x20>
    2206:	ed b7       	in	r30, 0x3d	; 61
    2208:	fe b7       	in	r31, 0x3e	; 62
    220a:	31 96       	adiw	r30, 0x01	; 1
    220c:	ce 01       	movw	r24, r28
    220e:	03 96       	adiw	r24, 0x03	; 3
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	80 e6       	ldi	r24, 0x60	; 96
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	93 83       	std	Z+3, r25	; 0x03
    221a:	82 83       	std	Z+2, r24	; 0x02
    221c:	8b 89       	ldd	r24, Y+19	; 0x13
    221e:	9c 89       	ldd	r25, Y+20	; 0x14
    2220:	95 83       	std	Z+5, r25	; 0x05
    2222:	84 83       	std	Z+4, r24	; 0x04
    2224:	0e 94 f7 12 	call	0x25ee	; 0x25ee <sprintf>
    2228:	8d b7       	in	r24, 0x3d	; 61
    222a:	9e b7       	in	r25, 0x3e	; 62
    222c:	06 96       	adiw	r24, 0x06	; 6
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	9e bf       	out	0x3e, r25	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	8d bf       	out	0x3d, r24	; 61

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
    2238:	19 82       	std	Y+1, r1	; 0x01
    223a:	0f c0       	rjmp	.+30     	; 0x225a <LCD_enuWriteNumber+0x74>
			Local_u8Iterator++) {
		Local_enuErrorState = LCD_enuDisplayChar(
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	ce 01       	movw	r24, r28
    2244:	03 96       	adiw	r24, 0x03	; 3
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	80 81       	ld	r24, Z
    224e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_enuDisplayChar>
    2252:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
			Local_u8Iterator++) {
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	ce 01       	movw	r24, r28
    2262:	03 96       	adiw	r24, 0x03	; 3
    2264:	fc 01       	movw	r30, r24
    2266:	e2 0f       	add	r30, r18
    2268:	f3 1f       	adc	r31, r19
    226a:	80 81       	ld	r24, Z
    226c:	88 23       	and	r24, r24
    226e:	31 f7       	brne	.-52     	; 0x223c <LCD_enuWriteNumber+0x56>
			Local_u8Iterator++) {
		Local_enuErrorState = LCD_enuDisplayChar(
				Local_As8Container[Local_u8Iterator]);
	}

	return Local_enuErrorState;
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2272:	64 96       	adiw	r28, 0x14	; 20
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <main>:
#include "LCD_int.h"
#include "KBD_int.h"
#include "math_function_int.h"


int main(void) {
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	63 97       	sbiw	r28, 0x13	; 19
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
	u8 firstNumArr[2] = { 0 }, secondNumArr[2] = { 0 }, operation;
    2298:	19 8a       	std	Y+17, r1	; 0x11
    229a:	18 8a       	std	Y+16, r1	; 0x10
    229c:	1b 8a       	std	Y+19, r1	; 0x13
    229e:	1a 8a       	std	Y+18, r1	; 0x12
	u32 firstNum, secondNum,ans;
	DIO_enuInit();
    22a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
	LCD_enuInit();
    22a4:	0e 94 04 0b 	call	0x1608	; 0x1608 <LCD_enuInit>
	KPD_Init();
    22a8:	0e 94 25 0a 	call	0x144a	; 0x144a <KPD_Init>

	while (1) {

		u8 digit = KBD_u8_grtPressedkey();
    22ac:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <main+0x36>
		while (digit == KBD_NO_PRESSED_KEY) {
			digit = KBD_u8_grtPressedkey();
    22b4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    22b8:	8a 83       	std	Y+2, r24	; 0x02
	KPD_Init();

	while (1) {

		u8 digit = KBD_u8_grtPressedkey();
		while (digit == KBD_NO_PRESSED_KEY) {
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	8f 3f       	cpi	r24, 0xFF	; 255
    22be:	d1 f3       	breq	.-12     	; 0x22b4 <main+0x30>
			digit = KBD_u8_grtPressedkey();
		}
		u8 i = 0;
    22c0:	19 82       	std	Y+1, r1	; 0x01
    22c2:	1a c0       	rjmp	.+52     	; 0x22f8 <main+0x74>
		while (digit != '*' && digit != '/' && digit != '+' && digit != '-'
				&& digit != '=') {
			firstNumArr[i] = digit;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	ce 01       	movw	r24, r28
    22cc:	40 96       	adiw	r24, 0x10	; 16
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	80 83       	st	Z, r24
			LCD_enuDisplayChar(digit);
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_enuDisplayChar>
			i++;
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	8f 5f       	subi	r24, 0xFF	; 255
    22e2:	89 83       	std	Y+1, r24	; 0x01
			digit = KBD_u8_grtPressedkey();
    22e4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    22e8:	8a 83       	std	Y+2, r24	; 0x02
    22ea:	03 c0       	rjmp	.+6      	; 0x22f2 <main+0x6e>
			while (digit == KBD_NO_PRESSED_KEY) {
				digit = KBD_u8_grtPressedkey();
    22ec:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    22f0:	8a 83       	std	Y+2, r24	; 0x02
				&& digit != '=') {
			firstNumArr[i] = digit;
			LCD_enuDisplayChar(digit);
			i++;
			digit = KBD_u8_grtPressedkey();
			while (digit == KBD_NO_PRESSED_KEY) {
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	8f 3f       	cpi	r24, 0xFF	; 255
    22f6:	d1 f3       	breq	.-12     	; 0x22ec <main+0x68>
		u8 digit = KBD_u8_grtPressedkey();
		while (digit == KBD_NO_PRESSED_KEY) {
			digit = KBD_u8_grtPressedkey();
		}
		u8 i = 0;
		while (digit != '*' && digit != '/' && digit != '+' && digit != '-'
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	8a 32       	cpi	r24, 0x2A	; 42
    22fc:	61 f0       	breq	.+24     	; 0x2316 <main+0x92>
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	8f 32       	cpi	r24, 0x2F	; 47
    2302:	49 f0       	breq	.+18     	; 0x2316 <main+0x92>
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	8b 32       	cpi	r24, 0x2B	; 43
    2308:	31 f0       	breq	.+12     	; 0x2316 <main+0x92>
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	8d 32       	cpi	r24, 0x2D	; 45
    230e:	19 f0       	breq	.+6      	; 0x2316 <main+0x92>
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	8d 33       	cpi	r24, 0x3D	; 61
    2314:	b9 f6       	brne	.-82     	; 0x22c4 <main+0x40>
				digit = KBD_u8_grtPressedkey();
			}

		}

		operation = digit;
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_enuDisplayChar(digit);
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_enuDisplayChar>
		digit = KBD_u8_grtPressedkey();
    2320:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	03 c0       	rjmp	.+6      	; 0x232e <main+0xaa>
		while (digit == KBD_NO_PRESSED_KEY) {
			digit = KBD_u8_grtPressedkey();
    2328:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    232c:	8a 83       	std	Y+2, r24	; 0x02
		}

		operation = digit;
		LCD_enuDisplayChar(digit);
		digit = KBD_u8_grtPressedkey();
		while (digit == KBD_NO_PRESSED_KEY) {
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	8f 3f       	cpi	r24, 0xFF	; 255
    2332:	d1 f3       	breq	.-12     	; 0x2328 <main+0xa4>
			digit = KBD_u8_grtPressedkey();
		}
		i = 0;
    2334:	19 82       	std	Y+1, r1	; 0x01
    2336:	1a c0       	rjmp	.+52     	; 0x236c <main+0xe8>

		while (digit != '*' && digit != '/' && digit != '+' && digit != '-'
				&& digit != '=') {
			secondNumArr[i] = digit;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	ce 01       	movw	r24, r28
    2340:	42 96       	adiw	r24, 0x12	; 18
    2342:	fc 01       	movw	r30, r24
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	80 83       	st	Z, r24
			LCD_enuDisplayChar(digit);
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_enuDisplayChar>
			i++;
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	89 83       	std	Y+1, r24	; 0x01
			digit = KBD_u8_grtPressedkey();
    2358:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    235c:	8a 83       	std	Y+2, r24	; 0x02
    235e:	03 c0       	rjmp	.+6      	; 0x2366 <main+0xe2>
			while (digit == KBD_NO_PRESSED_KEY) {
				digit = KBD_u8_grtPressedkey();
    2360:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KBD_u8_grtPressedkey>
    2364:	8a 83       	std	Y+2, r24	; 0x02
				&& digit != '=') {
			secondNumArr[i] = digit;
			LCD_enuDisplayChar(digit);
			i++;
			digit = KBD_u8_grtPressedkey();
			while (digit == KBD_NO_PRESSED_KEY) {
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	8f 3f       	cpi	r24, 0xFF	; 255
    236a:	d1 f3       	breq	.-12     	; 0x2360 <main+0xdc>
		while (digit == KBD_NO_PRESSED_KEY) {
			digit = KBD_u8_grtPressedkey();
		}
		i = 0;

		while (digit != '*' && digit != '/' && digit != '+' && digit != '-'
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	8a 32       	cpi	r24, 0x2A	; 42
    2370:	61 f0       	breq	.+24     	; 0x238a <main+0x106>
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	8f 32       	cpi	r24, 0x2F	; 47
    2376:	49 f0       	breq	.+18     	; 0x238a <main+0x106>
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	8b 32       	cpi	r24, 0x2B	; 43
    237c:	31 f0       	breq	.+12     	; 0x238a <main+0x106>
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	8d 32       	cpi	r24, 0x2D	; 45
    2382:	19 f0       	breq	.+6      	; 0x238a <main+0x106>
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	8d 33       	cpi	r24, 0x3D	; 61
    2388:	b9 f6       	brne	.-82     	; 0x2338 <main+0xb4>
			while (digit == KBD_NO_PRESSED_KEY) {
				digit = KBD_u8_grtPressedkey();
			}

		}
		firstNum = calcNum(firstNumArr);
    238a:	ce 01       	movw	r24, r28
    238c:	40 96       	adiw	r24, 0x10	; 16
    238e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <calcNum>
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	8b 87       	std	Y+11, r24	; 0x0b
    239c:	9c 87       	std	Y+12, r25	; 0x0c
    239e:	ad 87       	std	Y+13, r26	; 0x0d
    23a0:	be 87       	std	Y+14, r27	; 0x0e
		secondNum = calcNum(secondNumArr);
    23a2:	ce 01       	movw	r24, r28
    23a4:	42 96       	adiw	r24, 0x12	; 18
    23a6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <calcNum>
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e0       	ldi	r26, 0x00	; 0
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	8f 83       	std	Y+7, r24	; 0x07
    23b4:	98 87       	std	Y+8, r25	; 0x08
    23b6:	a9 87       	std	Y+9, r26	; 0x09
    23b8:	ba 87       	std	Y+10, r27	; 0x0a
LCD_vidClearScreen();
    23ba:	0e 94 e7 10 	call	0x21ce	; 0x21ce <LCD_vidClearScreen>
LCD_enuWriteNumber(firstNum);
    23be:	8b 85       	ldd	r24, Y+11	; 0x0b
    23c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23c2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_enuWriteNumber>
LCD_enuDisplayChar(operation);
    23c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c8:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_enuDisplayChar>

LCD_enuWriteNumber(secondNum);
    23cc:	8f 81       	ldd	r24, Y+7	; 0x07
    23ce:	98 85       	ldd	r25, Y+8	; 0x08
    23d0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_enuWriteNumber>
		LCD_enuDisplayChar('=');
    23d4:	8d e3       	ldi	r24, 0x3D	; 61
    23d6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_enuDisplayChar>

		ans = calcAnswer(firstNum,secondNum,operation);
    23da:	8b 85       	ldd	r24, Y+11	; 0x0b
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	69 2f       	mov	r22, r25
    23e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    23e2:	0e 94 00 12 	call	0x2400	; 0x2400 <calcAnswer>
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e0       	ldi	r26, 0x00	; 0
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	ad 83       	std	Y+5, r26	; 0x05
    23f4:	be 83       	std	Y+6, r27	; 0x06
		LCD_enuWriteNumber(ans);
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_enuWriteNumber>
    23fe:	56 cf       	rjmp	.-340    	; 0x22ac <main+0x28>

00002400 <calcAnswer>:
 *  Created on: Dec 10, 2023
 *      Author: khaled
 */
#include "STD_TYPES.h"

u8 calcAnswer(u8 firstNum, u8 secondNum, u8 operation) {
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <calcAnswer+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <calcAnswer+0x8>
    2408:	00 d0       	rcall	.+0      	; 0x240a <calcAnswer+0xa>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	6a 83       	std	Y+2, r22	; 0x02
    2412:	4b 83       	std	Y+3, r20	; 0x03
	switch (operation) {
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	3e 83       	std	Y+6, r19	; 0x06
    241c:	2d 83       	std	Y+5, r18	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	8b 32       	cpi	r24, 0x2B	; 43
    2424:	91 05       	cpc	r25, r1
    2426:	b1 f0       	breq	.+44     	; 0x2454 <calcAnswer+0x54>
    2428:	2d 81       	ldd	r18, Y+5	; 0x05
    242a:	3e 81       	ldd	r19, Y+6	; 0x06
    242c:	2c 32       	cpi	r18, 0x2C	; 44
    242e:	31 05       	cpc	r19, r1
    2430:	34 f4       	brge	.+12     	; 0x243e <calcAnswer+0x3e>
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	8a 32       	cpi	r24, 0x2A	; 42
    2438:	91 05       	cpc	r25, r1
    243a:	c1 f0       	breq	.+48     	; 0x246c <calcAnswer+0x6c>
    243c:	25 c0       	rjmp	.+74     	; 0x2488 <calcAnswer+0x88>
    243e:	2d 81       	ldd	r18, Y+5	; 0x05
    2440:	3e 81       	ldd	r19, Y+6	; 0x06
    2442:	2d 32       	cpi	r18, 0x2D	; 45
    2444:	31 05       	cpc	r19, r1
    2446:	61 f0       	breq	.+24     	; 0x2460 <calcAnswer+0x60>
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	8f 32       	cpi	r24, 0x2F	; 47
    244e:	91 05       	cpc	r25, r1
    2450:	a1 f0       	breq	.+40     	; 0x247a <calcAnswer+0x7a>
    2452:	1a c0       	rjmp	.+52     	; 0x2488 <calcAnswer+0x88>
	case '+':
		return firstNum + secondNum;
    2454:	99 81       	ldd	r25, Y+1	; 0x01
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	29 2f       	mov	r18, r25
    245a:	28 0f       	add	r18, r24
    245c:	2c 83       	std	Y+4, r18	; 0x04
    245e:	15 c0       	rjmp	.+42     	; 0x248a <calcAnswer+0x8a>
		break;
	case '-':
		return firstNum - secondNum;
    2460:	99 81       	ldd	r25, Y+1	; 0x01
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	39 2f       	mov	r19, r25
    2466:	38 1b       	sub	r19, r24
    2468:	3c 83       	std	Y+4, r19	; 0x04
    246a:	0f c0       	rjmp	.+30     	; 0x248a <calcAnswer+0x8a>
		break;
	case '*':
		return firstNum * secondNum;
    246c:	99 81       	ldd	r25, Y+1	; 0x01
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	98 9f       	mul	r25, r24
    2472:	80 2d       	mov	r24, r0
    2474:	11 24       	eor	r1, r1
    2476:	8c 83       	std	Y+4, r24	; 0x04
    2478:	08 c0       	rjmp	.+16     	; 0x248a <calcAnswer+0x8a>
		break;
	case '/':
		return firstNum / secondNum;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	69 2f       	mov	r22, r25
    2480:	0e 94 b4 12 	call	0x2568	; 0x2568 <__udivmodqi4>
    2484:	8c 83       	std	Y+4, r24	; 0x04
    2486:	01 c0       	rjmp	.+2      	; 0x248a <calcAnswer+0x8a>
		break;

	}
	return 0;
    2488:	1c 82       	std	Y+4, r1	; 0x04
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    248c:	26 96       	adiw	r28, 0x06	; 6
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <calculatePower>:


u8 calculatePower(u8 base, u8 exponent) {
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <calculatePower+0x6>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <calculatePower+0x8>
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	6c 83       	std	Y+4, r22	; 0x04
	u8 result = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	8a 83       	std	Y+2, r24	; 0x02

	for (u8 i = 0; i < exponent; ++i) {
    24b2:	19 82       	std	Y+1, r1	; 0x01
    24b4:	09 c0       	rjmp	.+18     	; 0x24c8 <calculatePower+0x2a>
		result *= base;
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	98 9f       	mul	r25, r24
    24bc:	80 2d       	mov	r24, r0
    24be:	11 24       	eor	r1, r1
    24c0:	8a 83       	std	Y+2, r24	; 0x02


u8 calculatePower(u8 base, u8 exponent) {
	u8 result = 1;

	for (u8 i = 0; i < exponent; ++i) {
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	99 81       	ldd	r25, Y+1	; 0x01
    24ca:	8c 81       	ldd	r24, Y+4	; 0x04
    24cc:	98 17       	cp	r25, r24
    24ce:	98 f3       	brcs	.-26     	; 0x24b6 <calculatePower+0x18>
		result *= base;
	}

	return result;
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <calcNum>:

u8 calcNum(u8 * num) {
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <calcNum+0xa>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <calcNum+0xc>
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	9d 83       	std	Y+5, r25	; 0x05
    24f4:	8c 83       	std	Y+4, r24	; 0x04
	u8 j = 1, answer = 0;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	1a 82       	std	Y+2, r1	; 0x02

	for (u8 i = 0; i <= 1; i++) {
    24fc:	19 82       	std	Y+1, r1	; 0x01
    24fe:	26 c0       	rjmp	.+76     	; 0x254c <calcNum+0x6c>
		answer += (num[i]-'0') * calculatePower(10, j);
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	9d 81       	ldd	r25, Y+5	; 0x05
    250a:	fc 01       	movw	r30, r24
    250c:	e2 0f       	add	r30, r18
    250e:	f3 1f       	adc	r31, r19
    2510:	80 81       	ld	r24, Z
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	8c 01       	movw	r16, r24
    2518:	00 53       	subi	r16, 0x30	; 48
    251a:	10 40       	sbci	r17, 0x00	; 0
    251c:	8a e0       	ldi	r24, 0x0A	; 10
    251e:	6b 81       	ldd	r22, Y+3	; 0x03
    2520:	0e 94 4f 12 	call	0x249e	; 0x249e <calculatePower>
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 01       	movw	r18, r24
    252a:	02 9f       	mul	r16, r18
    252c:	c0 01       	movw	r24, r0
    252e:	03 9f       	mul	r16, r19
    2530:	90 0d       	add	r25, r0
    2532:	12 9f       	mul	r17, r18
    2534:	90 0d       	add	r25, r0
    2536:	11 24       	eor	r1, r1
    2538:	98 2f       	mov	r25, r24
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	89 0f       	add	r24, r25
    253e:	8a 83       	std	Y+2, r24	; 0x02
		j--;
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	81 50       	subi	r24, 0x01	; 1
    2544:	8b 83       	std	Y+3, r24	; 0x03
}

u8 calcNum(u8 * num) {
	u8 j = 1, answer = 0;

	for (u8 i = 0; i <= 1; i++) {
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	82 30       	cpi	r24, 0x02	; 2
    2550:	b8 f2       	brcs	.-82     	; 0x2500 <calcNum+0x20>
		answer += (num[i]-'0') * calculatePower(10, j);
		j--;
	}

	return answer;
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <__udivmodqi4>:
    2568:	99 1b       	sub	r25, r25
    256a:	79 e0       	ldi	r23, 0x09	; 9
    256c:	04 c0       	rjmp	.+8      	; 0x2576 <__udivmodqi4_ep>

0000256e <__udivmodqi4_loop>:
    256e:	99 1f       	adc	r25, r25
    2570:	96 17       	cp	r25, r22
    2572:	08 f0       	brcs	.+2      	; 0x2576 <__udivmodqi4_ep>
    2574:	96 1b       	sub	r25, r22

00002576 <__udivmodqi4_ep>:
    2576:	88 1f       	adc	r24, r24
    2578:	7a 95       	dec	r23
    257a:	c9 f7       	brne	.-14     	; 0x256e <__udivmodqi4_loop>
    257c:	80 95       	com	r24
    257e:	08 95       	ret

00002580 <__prologue_saves__>:
    2580:	2f 92       	push	r2
    2582:	3f 92       	push	r3
    2584:	4f 92       	push	r4
    2586:	5f 92       	push	r5
    2588:	6f 92       	push	r6
    258a:	7f 92       	push	r7
    258c:	8f 92       	push	r8
    258e:	9f 92       	push	r9
    2590:	af 92       	push	r10
    2592:	bf 92       	push	r11
    2594:	cf 92       	push	r12
    2596:	df 92       	push	r13
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	ca 1b       	sub	r28, r26
    25aa:	db 0b       	sbc	r29, r27
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	09 94       	ijmp

000025b8 <__epilogue_restores__>:
    25b8:	2a 88       	ldd	r2, Y+18	; 0x12
    25ba:	39 88       	ldd	r3, Y+17	; 0x11
    25bc:	48 88       	ldd	r4, Y+16	; 0x10
    25be:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    25c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    25c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    25c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ca:	b9 84       	ldd	r11, Y+9	; 0x09
    25cc:	c8 84       	ldd	r12, Y+8	; 0x08
    25ce:	df 80       	ldd	r13, Y+7	; 0x07
    25d0:	ee 80       	ldd	r14, Y+6	; 0x06
    25d2:	fd 80       	ldd	r15, Y+5	; 0x05
    25d4:	0c 81       	ldd	r16, Y+4	; 0x04
    25d6:	1b 81       	ldd	r17, Y+3	; 0x03
    25d8:	aa 81       	ldd	r26, Y+2	; 0x02
    25da:	b9 81       	ldd	r27, Y+1	; 0x01
    25dc:	ce 0f       	add	r28, r30
    25de:	d1 1d       	adc	r29, r1
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	ed 01       	movw	r28, r26
    25ec:	08 95       	ret

000025ee <sprintf>:
    25ee:	ae e0       	ldi	r26, 0x0E	; 14
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ed ef       	ldi	r30, 0xFD	; 253
    25f4:	f2 e1       	ldi	r31, 0x12	; 18
    25f6:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x1c>
    25fa:	0d 89       	ldd	r16, Y+21	; 0x15
    25fc:	1e 89       	ldd	r17, Y+22	; 0x16
    25fe:	86 e0       	ldi	r24, 0x06	; 6
    2600:	8c 83       	std	Y+4, r24	; 0x04
    2602:	1a 83       	std	Y+2, r17	; 0x02
    2604:	09 83       	std	Y+1, r16	; 0x01
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	9f e7       	ldi	r25, 0x7F	; 127
    260a:	9e 83       	std	Y+6, r25	; 0x06
    260c:	8d 83       	std	Y+5, r24	; 0x05
    260e:	9e 01       	movw	r18, r28
    2610:	27 5e       	subi	r18, 0xE7	; 231
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	6f 89       	ldd	r22, Y+23	; 0x17
    261a:	78 8d       	ldd	r23, Y+24	; 0x18
    261c:	a9 01       	movw	r20, r18
    261e:	0e 94 1b 13 	call	0x2636	; 0x2636 <vfprintf>
    2622:	2f 81       	ldd	r18, Y+7	; 0x07
    2624:	38 85       	ldd	r19, Y+8	; 0x08
    2626:	02 0f       	add	r16, r18
    2628:	13 1f       	adc	r17, r19
    262a:	f8 01       	movw	r30, r16
    262c:	10 82       	st	Z, r1
    262e:	2e 96       	adiw	r28, 0x0e	; 14
    2630:	e4 e0       	ldi	r30, 0x04	; 4
    2632:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__+0x1c>

00002636 <vfprintf>:
    2636:	ab e0       	ldi	r26, 0x0B	; 11
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e1 e2       	ldi	r30, 0x21	; 33
    263c:	f3 e1       	ldi	r31, 0x13	; 19
    263e:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__>
    2642:	3c 01       	movw	r6, r24
    2644:	2b 01       	movw	r4, r22
    2646:	5a 01       	movw	r10, r20
    2648:	fc 01       	movw	r30, r24
    264a:	17 82       	std	Z+7, r1	; 0x07
    264c:	16 82       	std	Z+6, r1	; 0x06
    264e:	83 81       	ldd	r24, Z+3	; 0x03
    2650:	81 fd       	sbrc	r24, 1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <vfprintf+0x24>
    2654:	6f ef       	ldi	r22, 0xFF	; 255
    2656:	7f ef       	ldi	r23, 0xFF	; 255
    2658:	c6 c1       	rjmp	.+908    	; 0x29e6 <vfprintf+0x3b0>
    265a:	9a e0       	ldi	r25, 0x0A	; 10
    265c:	89 2e       	mov	r8, r25
    265e:	1e 01       	movw	r2, r28
    2660:	08 94       	sec
    2662:	21 1c       	adc	r2, r1
    2664:	31 1c       	adc	r3, r1
    2666:	f3 01       	movw	r30, r6
    2668:	23 81       	ldd	r18, Z+3	; 0x03
    266a:	f2 01       	movw	r30, r4
    266c:	23 fd       	sbrc	r18, 3
    266e:	85 91       	lpm	r24, Z+
    2670:	23 ff       	sbrs	r18, 3
    2672:	81 91       	ld	r24, Z+
    2674:	2f 01       	movw	r4, r30
    2676:	88 23       	and	r24, r24
    2678:	09 f4       	brne	.+2      	; 0x267c <vfprintf+0x46>
    267a:	b2 c1       	rjmp	.+868    	; 0x29e0 <vfprintf+0x3aa>
    267c:	85 32       	cpi	r24, 0x25	; 37
    267e:	39 f4       	brne	.+14     	; 0x268e <vfprintf+0x58>
    2680:	23 fd       	sbrc	r18, 3
    2682:	85 91       	lpm	r24, Z+
    2684:	23 ff       	sbrs	r18, 3
    2686:	81 91       	ld	r24, Z+
    2688:	2f 01       	movw	r4, r30
    268a:	85 32       	cpi	r24, 0x25	; 37
    268c:	29 f4       	brne	.+10     	; 0x2698 <vfprintf+0x62>
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	b3 01       	movw	r22, r6
    2692:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2696:	e7 cf       	rjmp	.-50     	; 0x2666 <vfprintf+0x30>
    2698:	98 2f       	mov	r25, r24
    269a:	ff 24       	eor	r15, r15
    269c:	ee 24       	eor	r14, r14
    269e:	99 24       	eor	r9, r9
    26a0:	ff e1       	ldi	r31, 0x1F	; 31
    26a2:	ff 15       	cp	r31, r15
    26a4:	d0 f0       	brcs	.+52     	; 0x26da <vfprintf+0xa4>
    26a6:	9b 32       	cpi	r25, 0x2B	; 43
    26a8:	69 f0       	breq	.+26     	; 0x26c4 <vfprintf+0x8e>
    26aa:	9c 32       	cpi	r25, 0x2C	; 44
    26ac:	28 f4       	brcc	.+10     	; 0x26b8 <vfprintf+0x82>
    26ae:	90 32       	cpi	r25, 0x20	; 32
    26b0:	59 f0       	breq	.+22     	; 0x26c8 <vfprintf+0x92>
    26b2:	93 32       	cpi	r25, 0x23	; 35
    26b4:	91 f4       	brne	.+36     	; 0x26da <vfprintf+0xa4>
    26b6:	0e c0       	rjmp	.+28     	; 0x26d4 <vfprintf+0x9e>
    26b8:	9d 32       	cpi	r25, 0x2D	; 45
    26ba:	49 f0       	breq	.+18     	; 0x26ce <vfprintf+0x98>
    26bc:	90 33       	cpi	r25, 0x30	; 48
    26be:	69 f4       	brne	.+26     	; 0x26da <vfprintf+0xa4>
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	24 c0       	rjmp	.+72     	; 0x270c <vfprintf+0xd6>
    26c4:	52 e0       	ldi	r21, 0x02	; 2
    26c6:	f5 2a       	or	r15, r21
    26c8:	84 e0       	ldi	r24, 0x04	; 4
    26ca:	f8 2a       	or	r15, r24
    26cc:	28 c0       	rjmp	.+80     	; 0x271e <vfprintf+0xe8>
    26ce:	98 e0       	ldi	r25, 0x08	; 8
    26d0:	f9 2a       	or	r15, r25
    26d2:	25 c0       	rjmp	.+74     	; 0x271e <vfprintf+0xe8>
    26d4:	e0 e1       	ldi	r30, 0x10	; 16
    26d6:	fe 2a       	or	r15, r30
    26d8:	22 c0       	rjmp	.+68     	; 0x271e <vfprintf+0xe8>
    26da:	f7 fc       	sbrc	r15, 7
    26dc:	29 c0       	rjmp	.+82     	; 0x2730 <vfprintf+0xfa>
    26de:	89 2f       	mov	r24, r25
    26e0:	80 53       	subi	r24, 0x30	; 48
    26e2:	8a 30       	cpi	r24, 0x0A	; 10
    26e4:	70 f4       	brcc	.+28     	; 0x2702 <vfprintf+0xcc>
    26e6:	f6 fe       	sbrs	r15, 6
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <vfprintf+0xbe>
    26ea:	98 9c       	mul	r9, r8
    26ec:	90 2c       	mov	r9, r0
    26ee:	11 24       	eor	r1, r1
    26f0:	98 0e       	add	r9, r24
    26f2:	15 c0       	rjmp	.+42     	; 0x271e <vfprintf+0xe8>
    26f4:	e8 9c       	mul	r14, r8
    26f6:	e0 2c       	mov	r14, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	e8 0e       	add	r14, r24
    26fc:	f0 e2       	ldi	r31, 0x20	; 32
    26fe:	ff 2a       	or	r15, r31
    2700:	0e c0       	rjmp	.+28     	; 0x271e <vfprintf+0xe8>
    2702:	9e 32       	cpi	r25, 0x2E	; 46
    2704:	29 f4       	brne	.+10     	; 0x2710 <vfprintf+0xda>
    2706:	f6 fc       	sbrc	r15, 6
    2708:	6b c1       	rjmp	.+726    	; 0x29e0 <vfprintf+0x3aa>
    270a:	40 e4       	ldi	r20, 0x40	; 64
    270c:	f4 2a       	or	r15, r20
    270e:	07 c0       	rjmp	.+14     	; 0x271e <vfprintf+0xe8>
    2710:	9c 36       	cpi	r25, 0x6C	; 108
    2712:	19 f4       	brne	.+6      	; 0x271a <vfprintf+0xe4>
    2714:	50 e8       	ldi	r21, 0x80	; 128
    2716:	f5 2a       	or	r15, r21
    2718:	02 c0       	rjmp	.+4      	; 0x271e <vfprintf+0xe8>
    271a:	98 36       	cpi	r25, 0x68	; 104
    271c:	49 f4       	brne	.+18     	; 0x2730 <vfprintf+0xfa>
    271e:	f2 01       	movw	r30, r4
    2720:	23 fd       	sbrc	r18, 3
    2722:	95 91       	lpm	r25, Z+
    2724:	23 ff       	sbrs	r18, 3
    2726:	91 91       	ld	r25, Z+
    2728:	2f 01       	movw	r4, r30
    272a:	99 23       	and	r25, r25
    272c:	09 f0       	breq	.+2      	; 0x2730 <vfprintf+0xfa>
    272e:	b8 cf       	rjmp	.-144    	; 0x26a0 <vfprintf+0x6a>
    2730:	89 2f       	mov	r24, r25
    2732:	85 54       	subi	r24, 0x45	; 69
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	18 f0       	brcs	.+6      	; 0x273e <vfprintf+0x108>
    2738:	80 52       	subi	r24, 0x20	; 32
    273a:	83 30       	cpi	r24, 0x03	; 3
    273c:	38 f4       	brcc	.+14     	; 0x274c <vfprintf+0x116>
    273e:	44 e0       	ldi	r20, 0x04	; 4
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	a4 0e       	add	r10, r20
    2744:	b5 1e       	adc	r11, r21
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	59 83       	std	Y+1, r21	; 0x01
    274a:	0f c0       	rjmp	.+30     	; 0x276a <vfprintf+0x134>
    274c:	93 36       	cpi	r25, 0x63	; 99
    274e:	31 f0       	breq	.+12     	; 0x275c <vfprintf+0x126>
    2750:	93 37       	cpi	r25, 0x73	; 115
    2752:	79 f0       	breq	.+30     	; 0x2772 <vfprintf+0x13c>
    2754:	93 35       	cpi	r25, 0x53	; 83
    2756:	09 f0       	breq	.+2      	; 0x275a <vfprintf+0x124>
    2758:	56 c0       	rjmp	.+172    	; 0x2806 <vfprintf+0x1d0>
    275a:	20 c0       	rjmp	.+64     	; 0x279c <vfprintf+0x166>
    275c:	f5 01       	movw	r30, r10
    275e:	80 81       	ld	r24, Z
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	42 e0       	ldi	r20, 0x02	; 2
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	a4 0e       	add	r10, r20
    2768:	b5 1e       	adc	r11, r21
    276a:	61 01       	movw	r12, r2
    276c:	01 e0       	ldi	r16, 0x01	; 1
    276e:	10 e0       	ldi	r17, 0x00	; 0
    2770:	12 c0       	rjmp	.+36     	; 0x2796 <vfprintf+0x160>
    2772:	f5 01       	movw	r30, r10
    2774:	c0 80       	ld	r12, Z
    2776:	d1 80       	ldd	r13, Z+1	; 0x01
    2778:	f6 fc       	sbrc	r15, 6
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <vfprintf+0x14c>
    277c:	6f ef       	ldi	r22, 0xFF	; 255
    277e:	7f ef       	ldi	r23, 0xFF	; 255
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <vfprintf+0x150>
    2782:	69 2d       	mov	r22, r9
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	42 e0       	ldi	r20, 0x02	; 2
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	a4 0e       	add	r10, r20
    278c:	b5 1e       	adc	r11, r21
    278e:	c6 01       	movw	r24, r12
    2790:	0e 94 03 15 	call	0x2a06	; 0x2a06 <strnlen>
    2794:	8c 01       	movw	r16, r24
    2796:	5f e7       	ldi	r21, 0x7F	; 127
    2798:	f5 22       	and	r15, r21
    279a:	14 c0       	rjmp	.+40     	; 0x27c4 <vfprintf+0x18e>
    279c:	f5 01       	movw	r30, r10
    279e:	c0 80       	ld	r12, Z
    27a0:	d1 80       	ldd	r13, Z+1	; 0x01
    27a2:	f6 fc       	sbrc	r15, 6
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <vfprintf+0x176>
    27a6:	6f ef       	ldi	r22, 0xFF	; 255
    27a8:	7f ef       	ldi	r23, 0xFF	; 255
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <vfprintf+0x17a>
    27ac:	69 2d       	mov	r22, r9
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	42 e0       	ldi	r20, 0x02	; 2
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	a4 0e       	add	r10, r20
    27b6:	b5 1e       	adc	r11, r21
    27b8:	c6 01       	movw	r24, r12
    27ba:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <strnlen_P>
    27be:	8c 01       	movw	r16, r24
    27c0:	50 e8       	ldi	r21, 0x80	; 128
    27c2:	f5 2a       	or	r15, r21
    27c4:	f3 fe       	sbrs	r15, 3
    27c6:	07 c0       	rjmp	.+14     	; 0x27d6 <vfprintf+0x1a0>
    27c8:	1a c0       	rjmp	.+52     	; 0x27fe <vfprintf+0x1c8>
    27ca:	80 e2       	ldi	r24, 0x20	; 32
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	b3 01       	movw	r22, r6
    27d0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    27d4:	ea 94       	dec	r14
    27d6:	8e 2d       	mov	r24, r14
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	08 17       	cp	r16, r24
    27dc:	19 07       	cpc	r17, r25
    27de:	a8 f3       	brcs	.-22     	; 0x27ca <vfprintf+0x194>
    27e0:	0e c0       	rjmp	.+28     	; 0x27fe <vfprintf+0x1c8>
    27e2:	f6 01       	movw	r30, r12
    27e4:	f7 fc       	sbrc	r15, 7
    27e6:	85 91       	lpm	r24, Z+
    27e8:	f7 fe       	sbrs	r15, 7
    27ea:	81 91       	ld	r24, Z+
    27ec:	6f 01       	movw	r12, r30
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	b3 01       	movw	r22, r6
    27f2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    27f6:	e1 10       	cpse	r14, r1
    27f8:	ea 94       	dec	r14
    27fa:	01 50       	subi	r16, 0x01	; 1
    27fc:	10 40       	sbci	r17, 0x00	; 0
    27fe:	01 15       	cp	r16, r1
    2800:	11 05       	cpc	r17, r1
    2802:	79 f7       	brne	.-34     	; 0x27e2 <vfprintf+0x1ac>
    2804:	ea c0       	rjmp	.+468    	; 0x29da <vfprintf+0x3a4>
    2806:	94 36       	cpi	r25, 0x64	; 100
    2808:	11 f0       	breq	.+4      	; 0x280e <vfprintf+0x1d8>
    280a:	99 36       	cpi	r25, 0x69	; 105
    280c:	69 f5       	brne	.+90     	; 0x2868 <vfprintf+0x232>
    280e:	f7 fe       	sbrs	r15, 7
    2810:	08 c0       	rjmp	.+16     	; 0x2822 <vfprintf+0x1ec>
    2812:	f5 01       	movw	r30, r10
    2814:	20 81       	ld	r18, Z
    2816:	31 81       	ldd	r19, Z+1	; 0x01
    2818:	42 81       	ldd	r20, Z+2	; 0x02
    281a:	53 81       	ldd	r21, Z+3	; 0x03
    281c:	84 e0       	ldi	r24, 0x04	; 4
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0a c0       	rjmp	.+20     	; 0x2836 <vfprintf+0x200>
    2822:	f5 01       	movw	r30, r10
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	9c 01       	movw	r18, r24
    282a:	44 27       	eor	r20, r20
    282c:	37 fd       	sbrc	r19, 7
    282e:	40 95       	com	r20
    2830:	54 2f       	mov	r21, r20
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a8 0e       	add	r10, r24
    2838:	b9 1e       	adc	r11, r25
    283a:	9f e6       	ldi	r25, 0x6F	; 111
    283c:	f9 22       	and	r15, r25
    283e:	57 ff       	sbrs	r21, 7
    2840:	09 c0       	rjmp	.+18     	; 0x2854 <vfprintf+0x21e>
    2842:	50 95       	com	r21
    2844:	40 95       	com	r20
    2846:	30 95       	com	r19
    2848:	21 95       	neg	r18
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	4f 4f       	sbci	r20, 0xFF	; 255
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	e0 e8       	ldi	r30, 0x80	; 128
    2852:	fe 2a       	or	r15, r30
    2854:	ca 01       	movw	r24, r20
    2856:	b9 01       	movw	r22, r18
    2858:	a1 01       	movw	r20, r2
    285a:	2a e0       	ldi	r18, 0x0A	; 10
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__ultoa_invert>
    2862:	d8 2e       	mov	r13, r24
    2864:	d2 18       	sub	r13, r2
    2866:	40 c0       	rjmp	.+128    	; 0x28e8 <vfprintf+0x2b2>
    2868:	95 37       	cpi	r25, 0x75	; 117
    286a:	29 f4       	brne	.+10     	; 0x2876 <vfprintf+0x240>
    286c:	1f 2d       	mov	r17, r15
    286e:	1f 7e       	andi	r17, 0xEF	; 239
    2870:	2a e0       	ldi	r18, 0x0A	; 10
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	1d c0       	rjmp	.+58     	; 0x28b0 <vfprintf+0x27a>
    2876:	1f 2d       	mov	r17, r15
    2878:	19 7f       	andi	r17, 0xF9	; 249
    287a:	9f 36       	cpi	r25, 0x6F	; 111
    287c:	61 f0       	breq	.+24     	; 0x2896 <vfprintf+0x260>
    287e:	90 37       	cpi	r25, 0x70	; 112
    2880:	20 f4       	brcc	.+8      	; 0x288a <vfprintf+0x254>
    2882:	98 35       	cpi	r25, 0x58	; 88
    2884:	09 f0       	breq	.+2      	; 0x2888 <vfprintf+0x252>
    2886:	ac c0       	rjmp	.+344    	; 0x29e0 <vfprintf+0x3aa>
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <vfprintf+0x272>
    288a:	90 37       	cpi	r25, 0x70	; 112
    288c:	39 f0       	breq	.+14     	; 0x289c <vfprintf+0x266>
    288e:	98 37       	cpi	r25, 0x78	; 120
    2890:	09 f0       	breq	.+2      	; 0x2894 <vfprintf+0x25e>
    2892:	a6 c0       	rjmp	.+332    	; 0x29e0 <vfprintf+0x3aa>
    2894:	04 c0       	rjmp	.+8      	; 0x289e <vfprintf+0x268>
    2896:	28 e0       	ldi	r18, 0x08	; 8
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	0a c0       	rjmp	.+20     	; 0x28b0 <vfprintf+0x27a>
    289c:	10 61       	ori	r17, 0x10	; 16
    289e:	14 fd       	sbrc	r17, 4
    28a0:	14 60       	ori	r17, 0x04	; 4
    28a2:	20 e1       	ldi	r18, 0x10	; 16
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	04 c0       	rjmp	.+8      	; 0x28b0 <vfprintf+0x27a>
    28a8:	14 fd       	sbrc	r17, 4
    28aa:	16 60       	ori	r17, 0x06	; 6
    28ac:	20 e1       	ldi	r18, 0x10	; 16
    28ae:	32 e0       	ldi	r19, 0x02	; 2
    28b0:	17 ff       	sbrs	r17, 7
    28b2:	08 c0       	rjmp	.+16     	; 0x28c4 <vfprintf+0x28e>
    28b4:	f5 01       	movw	r30, r10
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	44 e0       	ldi	r20, 0x04	; 4
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	08 c0       	rjmp	.+16     	; 0x28d4 <vfprintf+0x29e>
    28c4:	f5 01       	movw	r30, r10
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	bc 01       	movw	r22, r24
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	42 e0       	ldi	r20, 0x02	; 2
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	a4 0e       	add	r10, r20
    28d6:	b5 1e       	adc	r11, r21
    28d8:	a1 01       	movw	r20, r2
    28da:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__ultoa_invert>
    28de:	d8 2e       	mov	r13, r24
    28e0:	d2 18       	sub	r13, r2
    28e2:	8f e7       	ldi	r24, 0x7F	; 127
    28e4:	f8 2e       	mov	r15, r24
    28e6:	f1 22       	and	r15, r17
    28e8:	f6 fe       	sbrs	r15, 6
    28ea:	0b c0       	rjmp	.+22     	; 0x2902 <vfprintf+0x2cc>
    28ec:	5e ef       	ldi	r21, 0xFE	; 254
    28ee:	f5 22       	and	r15, r21
    28f0:	d9 14       	cp	r13, r9
    28f2:	38 f4       	brcc	.+14     	; 0x2902 <vfprintf+0x2cc>
    28f4:	f4 fe       	sbrs	r15, 4
    28f6:	07 c0       	rjmp	.+14     	; 0x2906 <vfprintf+0x2d0>
    28f8:	f2 fc       	sbrc	r15, 2
    28fa:	05 c0       	rjmp	.+10     	; 0x2906 <vfprintf+0x2d0>
    28fc:	8f ee       	ldi	r24, 0xEF	; 239
    28fe:	f8 22       	and	r15, r24
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <vfprintf+0x2d0>
    2902:	1d 2d       	mov	r17, r13
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <vfprintf+0x2d2>
    2906:	19 2d       	mov	r17, r9
    2908:	f4 fe       	sbrs	r15, 4
    290a:	0d c0       	rjmp	.+26     	; 0x2926 <vfprintf+0x2f0>
    290c:	fe 01       	movw	r30, r28
    290e:	ed 0d       	add	r30, r13
    2910:	f1 1d       	adc	r31, r1
    2912:	80 81       	ld	r24, Z
    2914:	80 33       	cpi	r24, 0x30	; 48
    2916:	19 f4       	brne	.+6      	; 0x291e <vfprintf+0x2e8>
    2918:	99 ee       	ldi	r25, 0xE9	; 233
    291a:	f9 22       	and	r15, r25
    291c:	08 c0       	rjmp	.+16     	; 0x292e <vfprintf+0x2f8>
    291e:	1f 5f       	subi	r17, 0xFF	; 255
    2920:	f2 fe       	sbrs	r15, 2
    2922:	05 c0       	rjmp	.+10     	; 0x292e <vfprintf+0x2f8>
    2924:	03 c0       	rjmp	.+6      	; 0x292c <vfprintf+0x2f6>
    2926:	8f 2d       	mov	r24, r15
    2928:	86 78       	andi	r24, 0x86	; 134
    292a:	09 f0       	breq	.+2      	; 0x292e <vfprintf+0x2f8>
    292c:	1f 5f       	subi	r17, 0xFF	; 255
    292e:	0f 2d       	mov	r16, r15
    2930:	f3 fc       	sbrc	r15, 3
    2932:	14 c0       	rjmp	.+40     	; 0x295c <vfprintf+0x326>
    2934:	f0 fe       	sbrs	r15, 0
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <vfprintf+0x320>
    2938:	1e 15       	cp	r17, r14
    293a:	10 f0       	brcs	.+4      	; 0x2940 <vfprintf+0x30a>
    293c:	9d 2c       	mov	r9, r13
    293e:	0b c0       	rjmp	.+22     	; 0x2956 <vfprintf+0x320>
    2940:	9d 2c       	mov	r9, r13
    2942:	9e 0c       	add	r9, r14
    2944:	91 1a       	sub	r9, r17
    2946:	1e 2d       	mov	r17, r14
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <vfprintf+0x320>
    294a:	80 e2       	ldi	r24, 0x20	; 32
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	b3 01       	movw	r22, r6
    2950:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2954:	1f 5f       	subi	r17, 0xFF	; 255
    2956:	1e 15       	cp	r17, r14
    2958:	c0 f3       	brcs	.-16     	; 0x294a <vfprintf+0x314>
    295a:	04 c0       	rjmp	.+8      	; 0x2964 <vfprintf+0x32e>
    295c:	1e 15       	cp	r17, r14
    295e:	10 f4       	brcc	.+4      	; 0x2964 <vfprintf+0x32e>
    2960:	e1 1a       	sub	r14, r17
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <vfprintf+0x330>
    2964:	ee 24       	eor	r14, r14
    2966:	04 ff       	sbrs	r16, 4
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <vfprintf+0x352>
    296a:	80 e3       	ldi	r24, 0x30	; 48
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	b3 01       	movw	r22, r6
    2970:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2974:	02 ff       	sbrs	r16, 2
    2976:	1d c0       	rjmp	.+58     	; 0x29b2 <vfprintf+0x37c>
    2978:	01 fd       	sbrc	r16, 1
    297a:	03 c0       	rjmp	.+6      	; 0x2982 <vfprintf+0x34c>
    297c:	88 e7       	ldi	r24, 0x78	; 120
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e c0       	rjmp	.+28     	; 0x299e <vfprintf+0x368>
    2982:	88 e5       	ldi	r24, 0x58	; 88
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0b c0       	rjmp	.+22     	; 0x299e <vfprintf+0x368>
    2988:	80 2f       	mov	r24, r16
    298a:	86 78       	andi	r24, 0x86	; 134
    298c:	91 f0       	breq	.+36     	; 0x29b2 <vfprintf+0x37c>
    298e:	01 ff       	sbrs	r16, 1
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <vfprintf+0x360>
    2992:	8b e2       	ldi	r24, 0x2B	; 43
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <vfprintf+0x362>
    2996:	80 e2       	ldi	r24, 0x20	; 32
    2998:	f7 fc       	sbrc	r15, 7
    299a:	8d e2       	ldi	r24, 0x2D	; 45
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	b3 01       	movw	r22, r6
    29a0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    29a4:	06 c0       	rjmp	.+12     	; 0x29b2 <vfprintf+0x37c>
    29a6:	80 e3       	ldi	r24, 0x30	; 48
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	b3 01       	movw	r22, r6
    29ac:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    29b0:	9a 94       	dec	r9
    29b2:	d9 14       	cp	r13, r9
    29b4:	c0 f3       	brcs	.-16     	; 0x29a6 <vfprintf+0x370>
    29b6:	da 94       	dec	r13
    29b8:	f1 01       	movw	r30, r2
    29ba:	ed 0d       	add	r30, r13
    29bc:	f1 1d       	adc	r31, r1
    29be:	80 81       	ld	r24, Z
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	b3 01       	movw	r22, r6
    29c4:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    29c8:	dd 20       	and	r13, r13
    29ca:	a9 f7       	brne	.-22     	; 0x29b6 <vfprintf+0x380>
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <vfprintf+0x3a4>
    29ce:	80 e2       	ldi	r24, 0x20	; 32
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	b3 01       	movw	r22, r6
    29d4:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    29d8:	ea 94       	dec	r14
    29da:	ee 20       	and	r14, r14
    29dc:	c1 f7       	brne	.-16     	; 0x29ce <vfprintf+0x398>
    29de:	43 ce       	rjmp	.-890    	; 0x2666 <vfprintf+0x30>
    29e0:	f3 01       	movw	r30, r6
    29e2:	66 81       	ldd	r22, Z+6	; 0x06
    29e4:	77 81       	ldd	r23, Z+7	; 0x07
    29e6:	cb 01       	movw	r24, r22
    29e8:	2b 96       	adiw	r28, 0x0b	; 11
    29ea:	e2 e1       	ldi	r30, 0x12	; 18
    29ec:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__>

000029f0 <strnlen_P>:
    29f0:	fc 01       	movw	r30, r24
    29f2:	05 90       	lpm	r0, Z+
    29f4:	61 50       	subi	r22, 0x01	; 1
    29f6:	70 40       	sbci	r23, 0x00	; 0
    29f8:	01 10       	cpse	r0, r1
    29fa:	d8 f7       	brcc	.-10     	; 0x29f2 <strnlen_P+0x2>
    29fc:	80 95       	com	r24
    29fe:	90 95       	com	r25
    2a00:	8e 0f       	add	r24, r30
    2a02:	9f 1f       	adc	r25, r31
    2a04:	08 95       	ret

00002a06 <strnlen>:
    2a06:	fc 01       	movw	r30, r24
    2a08:	61 50       	subi	r22, 0x01	; 1
    2a0a:	70 40       	sbci	r23, 0x00	; 0
    2a0c:	01 90       	ld	r0, Z+
    2a0e:	01 10       	cpse	r0, r1
    2a10:	d8 f7       	brcc	.-10     	; 0x2a08 <strnlen+0x2>
    2a12:	80 95       	com	r24
    2a14:	90 95       	com	r25
    2a16:	8e 0f       	add	r24, r30
    2a18:	9f 1f       	adc	r25, r31
    2a1a:	08 95       	ret

00002a1c <fputc>:
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	8c 01       	movw	r16, r24
    2a26:	eb 01       	movw	r28, r22
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	81 ff       	sbrs	r24, 1
    2a2c:	1b c0       	rjmp	.+54     	; 0x2a64 <fputc+0x48>
    2a2e:	82 ff       	sbrs	r24, 2
    2a30:	0d c0       	rjmp	.+26     	; 0x2a4c <fputc+0x30>
    2a32:	2e 81       	ldd	r18, Y+6	; 0x06
    2a34:	3f 81       	ldd	r19, Y+7	; 0x07
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3a:	28 17       	cp	r18, r24
    2a3c:	39 07       	cpc	r19, r25
    2a3e:	64 f4       	brge	.+24     	; 0x2a58 <fputc+0x3c>
    2a40:	e8 81       	ld	r30, Y
    2a42:	f9 81       	ldd	r31, Y+1	; 0x01
    2a44:	01 93       	st	Z+, r16
    2a46:	f9 83       	std	Y+1, r31	; 0x01
    2a48:	e8 83       	st	Y, r30
    2a4a:	06 c0       	rjmp	.+12     	; 0x2a58 <fputc+0x3c>
    2a4c:	e8 85       	ldd	r30, Y+8	; 0x08
    2a4e:	f9 85       	ldd	r31, Y+9	; 0x09
    2a50:	80 2f       	mov	r24, r16
    2a52:	09 95       	icall
    2a54:	89 2b       	or	r24, r25
    2a56:	31 f4       	brne	.+12     	; 0x2a64 <fputc+0x48>
    2a58:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	9f 83       	std	Y+7, r25	; 0x07
    2a60:	8e 83       	std	Y+6, r24	; 0x06
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <fputc+0x4c>
    2a64:	0f ef       	ldi	r16, 0xFF	; 255
    2a66:	1f ef       	ldi	r17, 0xFF	; 255
    2a68:	c8 01       	movw	r24, r16
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <__ultoa_invert>:
    2a74:	fa 01       	movw	r30, r20
    2a76:	aa 27       	eor	r26, r26
    2a78:	28 30       	cpi	r18, 0x08	; 8
    2a7a:	51 f1       	breq	.+84     	; 0x2ad0 <__ultoa_invert+0x5c>
    2a7c:	20 31       	cpi	r18, 0x10	; 16
    2a7e:	81 f1       	breq	.+96     	; 0x2ae0 <__ultoa_invert+0x6c>
    2a80:	e8 94       	clt
    2a82:	6f 93       	push	r22
    2a84:	6e 7f       	andi	r22, 0xFE	; 254
    2a86:	6e 5f       	subi	r22, 0xFE	; 254
    2a88:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	af 4f       	sbci	r26, 0xFF	; 255
    2a90:	b1 e0       	ldi	r27, 0x01	; 1
    2a92:	3e d0       	rcall	.+124    	; 0x2b10 <__ultoa_invert+0x9c>
    2a94:	b4 e0       	ldi	r27, 0x04	; 4
    2a96:	3c d0       	rcall	.+120    	; 0x2b10 <__ultoa_invert+0x9c>
    2a98:	67 0f       	add	r22, r23
    2a9a:	78 1f       	adc	r23, r24
    2a9c:	89 1f       	adc	r24, r25
    2a9e:	9a 1f       	adc	r25, r26
    2aa0:	a1 1d       	adc	r26, r1
    2aa2:	68 0f       	add	r22, r24
    2aa4:	79 1f       	adc	r23, r25
    2aa6:	8a 1f       	adc	r24, r26
    2aa8:	91 1d       	adc	r25, r1
    2aaa:	a1 1d       	adc	r26, r1
    2aac:	6a 0f       	add	r22, r26
    2aae:	71 1d       	adc	r23, r1
    2ab0:	81 1d       	adc	r24, r1
    2ab2:	91 1d       	adc	r25, r1
    2ab4:	a1 1d       	adc	r26, r1
    2ab6:	20 d0       	rcall	.+64     	; 0x2af8 <__ultoa_invert+0x84>
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <__ultoa_invert+0x48>
    2aba:	68 94       	set
    2abc:	3f 91       	pop	r19
    2abe:	2a e0       	ldi	r18, 0x0A	; 10
    2ac0:	26 9f       	mul	r18, r22
    2ac2:	11 24       	eor	r1, r1
    2ac4:	30 19       	sub	r19, r0
    2ac6:	30 5d       	subi	r19, 0xD0	; 208
    2ac8:	31 93       	st	Z+, r19
    2aca:	de f6       	brtc	.-74     	; 0x2a82 <__ultoa_invert+0xe>
    2acc:	cf 01       	movw	r24, r30
    2ace:	08 95       	ret
    2ad0:	46 2f       	mov	r20, r22
    2ad2:	47 70       	andi	r20, 0x07	; 7
    2ad4:	40 5d       	subi	r20, 0xD0	; 208
    2ad6:	41 93       	st	Z+, r20
    2ad8:	b3 e0       	ldi	r27, 0x03	; 3
    2ada:	0f d0       	rcall	.+30     	; 0x2afa <__ultoa_invert+0x86>
    2adc:	c9 f7       	brne	.-14     	; 0x2ad0 <__ultoa_invert+0x5c>
    2ade:	f6 cf       	rjmp	.-20     	; 0x2acc <__ultoa_invert+0x58>
    2ae0:	46 2f       	mov	r20, r22
    2ae2:	4f 70       	andi	r20, 0x0F	; 15
    2ae4:	40 5d       	subi	r20, 0xD0	; 208
    2ae6:	4a 33       	cpi	r20, 0x3A	; 58
    2ae8:	18 f0       	brcs	.+6      	; 0x2af0 <__ultoa_invert+0x7c>
    2aea:	49 5d       	subi	r20, 0xD9	; 217
    2aec:	31 fd       	sbrc	r19, 1
    2aee:	40 52       	subi	r20, 0x20	; 32
    2af0:	41 93       	st	Z+, r20
    2af2:	02 d0       	rcall	.+4      	; 0x2af8 <__ultoa_invert+0x84>
    2af4:	a9 f7       	brne	.-22     	; 0x2ae0 <__ultoa_invert+0x6c>
    2af6:	ea cf       	rjmp	.-44     	; 0x2acc <__ultoa_invert+0x58>
    2af8:	b4 e0       	ldi	r27, 0x04	; 4
    2afa:	a6 95       	lsr	r26
    2afc:	97 95       	ror	r25
    2afe:	87 95       	ror	r24
    2b00:	77 95       	ror	r23
    2b02:	67 95       	ror	r22
    2b04:	ba 95       	dec	r27
    2b06:	c9 f7       	brne	.-14     	; 0x2afa <__ultoa_invert+0x86>
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	61 05       	cpc	r22, r1
    2b0c:	71 05       	cpc	r23, r1
    2b0e:	08 95       	ret
    2b10:	9b 01       	movw	r18, r22
    2b12:	ac 01       	movw	r20, r24
    2b14:	0a 2e       	mov	r0, r26
    2b16:	06 94       	lsr	r0
    2b18:	57 95       	ror	r21
    2b1a:	47 95       	ror	r20
    2b1c:	37 95       	ror	r19
    2b1e:	27 95       	ror	r18
    2b20:	ba 95       	dec	r27
    2b22:	c9 f7       	brne	.-14     	; 0x2b16 <__ultoa_invert+0xa2>
    2b24:	62 0f       	add	r22, r18
    2b26:	73 1f       	adc	r23, r19
    2b28:	84 1f       	adc	r24, r20
    2b2a:	95 1f       	adc	r25, r21
    2b2c:	a0 1d       	adc	r26, r0
    2b2e:	08 95       	ret

00002b30 <_exit>:
    2b30:	f8 94       	cli

00002b32 <__stop_program>:
    2b32:	ff cf       	rjmp	.-2      	; 0x2b32 <__stop_program>
